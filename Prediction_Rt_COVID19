{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'R version 4.0.3 (2020-10-10)'"
      ],
      "text/latex": [
       "'R version 4.0.3 (2020-10-10)'"
      ],
      "text/markdown": [
       "'R version 4.0.3 (2020-10-10)'"
      ],
      "text/plain": [
       "[1] \"R version 4.0.3 (2020-10-10)\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "libraries = c(\"dplyr\",\"magrittr\",\"tidyr\",\"ggplot2\",\"readxl\",\"RColorBrewer\",\"zoo\",\n",
    "              \"readxl\",\"writexl\",\"gridExtra\",\"MASS\",\"ConnMatTools\")\n",
    "for(x in libraries) { library(x,character.only=TRUE,warn.conflicts=FALSE,quietly=TRUE) }\n",
    "\n",
    "'%&%' = function(x,y)paste0(x,y)\n",
    "\n",
    "theme_set(theme_bw())\n",
    "version$version.string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "Start_date <- as.Date(\"2020-02-24\")\n",
    "new_Start_date <- as.Date(\"2020-03-15\")\n",
    "\n",
    "Final_date <- as.Date(\"2021-01-31\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'Hokkaido'</li><li>'Aomori'</li><li>'Iwate'</li><li>'Miyagi'</li><li>'Akita'</li><li>'Yamagata'</li><li>'Fukushima'</li><li>'Ibaraki'</li><li>'Tochigi'</li><li>'Gumma'</li><li>'Saitama'</li><li>'Chiba'</li><li>'Tokyo'</li><li>'Kanagawa'</li><li>'Niigata'</li><li>'Toyama'</li><li>'Ishikawa'</li><li>'Fukui'</li><li>'Yamanashi'</li><li>'Nagano'</li><li>'Gifu'</li><li>'Shizuoka'</li><li>'Aichi'</li><li>'Mie'</li><li>'Shiga'</li><li>'Kyoto'</li><li>'Osaka'</li><li>'Hyogo'</li><li>'Nara'</li><li>'Wakayama'</li><li>'Tottori'</li><li>'Shimane'</li><li>'Okayama'</li><li>'Hiroshima'</li><li>'Yamaguchi'</li><li>'Tokushima'</li><li>'Kagawa'</li><li>'Ehime'</li><li>'Kochi'</li><li>'Fukuoka'</li><li>'Saga'</li><li>'Nagasaki'</li><li>'Kumamoto'</li><li>'Oita'</li><li>'Miyazaki'</li><li>'Kagoshima'</li><li>'Okinawa '</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'Hokkaido'\n",
       "\\item 'Aomori'\n",
       "\\item 'Iwate'\n",
       "\\item 'Miyagi'\n",
       "\\item 'Akita'\n",
       "\\item 'Yamagata'\n",
       "\\item 'Fukushima'\n",
       "\\item 'Ibaraki'\n",
       "\\item 'Tochigi'\n",
       "\\item 'Gumma'\n",
       "\\item 'Saitama'\n",
       "\\item 'Chiba'\n",
       "\\item 'Tokyo'\n",
       "\\item 'Kanagawa'\n",
       "\\item 'Niigata'\n",
       "\\item 'Toyama'\n",
       "\\item 'Ishikawa'\n",
       "\\item 'Fukui'\n",
       "\\item 'Yamanashi'\n",
       "\\item 'Nagano'\n",
       "\\item 'Gifu'\n",
       "\\item 'Shizuoka'\n",
       "\\item 'Aichi'\n",
       "\\item 'Mie'\n",
       "\\item 'Shiga'\n",
       "\\item 'Kyoto'\n",
       "\\item 'Osaka'\n",
       "\\item 'Hyogo'\n",
       "\\item 'Nara'\n",
       "\\item 'Wakayama'\n",
       "\\item 'Tottori'\n",
       "\\item 'Shimane'\n",
       "\\item 'Okayama'\n",
       "\\item 'Hiroshima'\n",
       "\\item 'Yamaguchi'\n",
       "\\item 'Tokushima'\n",
       "\\item 'Kagawa'\n",
       "\\item 'Ehime'\n",
       "\\item 'Kochi'\n",
       "\\item 'Fukuoka'\n",
       "\\item 'Saga'\n",
       "\\item 'Nagasaki'\n",
       "\\item 'Kumamoto'\n",
       "\\item 'Oita'\n",
       "\\item 'Miyazaki'\n",
       "\\item 'Kagoshima'\n",
       "\\item 'Okinawa '\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'Hokkaido'\n",
       "2. 'Aomori'\n",
       "3. 'Iwate'\n",
       "4. 'Miyagi'\n",
       "5. 'Akita'\n",
       "6. 'Yamagata'\n",
       "7. 'Fukushima'\n",
       "8. 'Ibaraki'\n",
       "9. 'Tochigi'\n",
       "10. 'Gumma'\n",
       "11. 'Saitama'\n",
       "12. 'Chiba'\n",
       "13. 'Tokyo'\n",
       "14. 'Kanagawa'\n",
       "15. 'Niigata'\n",
       "16. 'Toyama'\n",
       "17. 'Ishikawa'\n",
       "18. 'Fukui'\n",
       "19. 'Yamanashi'\n",
       "20. 'Nagano'\n",
       "21. 'Gifu'\n",
       "22. 'Shizuoka'\n",
       "23. 'Aichi'\n",
       "24. 'Mie'\n",
       "25. 'Shiga'\n",
       "26. 'Kyoto'\n",
       "27. 'Osaka'\n",
       "28. 'Hyogo'\n",
       "29. 'Nara'\n",
       "30. 'Wakayama'\n",
       "31. 'Tottori'\n",
       "32. 'Shimane'\n",
       "33. 'Okayama'\n",
       "34. 'Hiroshima'\n",
       "35. 'Yamaguchi'\n",
       "36. 'Tokushima'\n",
       "37. 'Kagawa'\n",
       "38. 'Ehime'\n",
       "39. 'Kochi'\n",
       "40. 'Fukuoka'\n",
       "41. 'Saga'\n",
       "42. 'Nagasaki'\n",
       "43. 'Kumamoto'\n",
       "44. 'Oita'\n",
       "45. 'Miyazaki'\n",
       "46. 'Kagoshima'\n",
       "47. 'Okinawa '\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"Hokkaido\"  \"Aomori\"    \"Iwate\"     \"Miyagi\"    \"Akita\"     \"Yamagata\" \n",
       " [7] \"Fukushima\" \"Ibaraki\"   \"Tochigi\"   \"Gumma\"     \"Saitama\"   \"Chiba\"    \n",
       "[13] \"Tokyo\"     \"Kanagawa\"  \"Niigata\"   \"Toyama\"    \"Ishikawa\"  \"Fukui\"    \n",
       "[19] \"Yamanashi\" \"Nagano\"    \"Gifu\"      \"Shizuoka\"  \"Aichi\"     \"Mie\"      \n",
       "[25] \"Shiga\"     \"Kyoto\"     \"Osaka\"     \"Hyogo\"     \"Nara\"      \"Wakayama\" \n",
       "[31] \"Tottori\"   \"Shimane\"   \"Okayama\"   \"Hiroshima\" \"Yamaguchi\" \"Tokushima\"\n",
       "[37] \"Kagawa\"    \"Ehime\"     \"Kochi\"     \"Fukuoka\"   \"Saga\"      \"Nagasaki\" \n",
       "[43] \"Kumamoto\"  \"Oita\"      \"Miyazaki\"  \"Kagoshima\" \"Okinawa \" "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "47"
      ],
      "text/latex": [
       "47"
      ],
      "text/markdown": [
       "47"
      ],
      "text/plain": [
       "[1] 47"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "read.csv(\"density_data.csv\") -> Density\n",
    "(prefecture_name <- Density$prefecture)\n",
    "length(prefecture_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Google mobility data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "read.csv(\"x.csv\") -> google_dt\n",
    "cbind(google_dt[,1], google_dt[,2], google_dt[,32], google_dt[,44:49]) -> google_final_dt\n",
    "\n",
    "colnames(google_final_dt) <- c(\"X\", \"date\", \"prefecture\", \n",
    "                               \"retail\", \"grocery\",\"parks\",\"transit\",\"workplaces\",\"residential\")\n",
    "\n",
    "google_final_dt$date <- as.Date(as.Date(google_final_dt$date, \"%Y-%m-%d\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 9</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>X</th><th scope=col>date</th><th scope=col>prefecture</th><th scope=col>retail</th><th scope=col>grocery</th><th scope=col>parks</th><th scope=col>transit</th><th scope=col>workplaces</th><th scope=col>residential</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>1</td><td>2020-02-24</td><td>Nara</td><td> 18</td><td> 4</td><td> 54</td><td>-27</td><td>-55</td><td>14</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2</td><td>2020-02-25</td><td>Nara</td><td>  0</td><td> 7</td><td>  0</td><td> -2</td><td>  1</td><td> 1</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>3</td><td>2020-02-26</td><td>Nara</td><td> -4</td><td> 3</td><td> -5</td><td> -5</td><td>  1</td><td> 1</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>4</td><td>2020-02-27</td><td>Nara</td><td> -3</td><td> 6</td><td> -4</td><td> -7</td><td>  0</td><td> 1</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>5</td><td>2020-02-28</td><td>Nara</td><td> -2</td><td>14</td><td> -4</td><td>-10</td><td>  1</td><td> 2</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>6</td><td>2020-02-29</td><td>Nara</td><td>-10</td><td> 9</td><td>-22</td><td>-21</td><td>  3</td><td> 4</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 9\n",
       "\\begin{tabular}{r|lllllllll}\n",
       "  & X & date & prefecture & retail & grocery & parks & transit & workplaces & residential\\\\\n",
       "  & <int> & <date> & <chr> & <int> & <int> & <int> & <int> & <int> & <int>\\\\\n",
       "\\hline\n",
       "\t1 & 1 & 2020-02-24 & Nara &  18 &  4 &  54 & -27 & -55 & 14\\\\\n",
       "\t2 & 2 & 2020-02-25 & Nara &   0 &  7 &   0 &  -2 &   1 &  1\\\\\n",
       "\t3 & 3 & 2020-02-26 & Nara &  -4 &  3 &  -5 &  -5 &   1 &  1\\\\\n",
       "\t4 & 4 & 2020-02-27 & Nara &  -3 &  6 &  -4 &  -7 &   0 &  1\\\\\n",
       "\t5 & 5 & 2020-02-28 & Nara &  -2 & 14 &  -4 & -10 &   1 &  2\\\\\n",
       "\t6 & 6 & 2020-02-29 & Nara & -10 &  9 & -22 & -21 &   3 &  4\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 9\n",
       "\n",
       "| <!--/--> | X &lt;int&gt; | date &lt;date&gt; | prefecture &lt;chr&gt; | retail &lt;int&gt; | grocery &lt;int&gt; | parks &lt;int&gt; | transit &lt;int&gt; | workplaces &lt;int&gt; | residential &lt;int&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | 1 | 2020-02-24 | Nara |  18 |  4 |  54 | -27 | -55 | 14 |\n",
       "| 2 | 2 | 2020-02-25 | Nara |   0 |  7 |   0 |  -2 |   1 |  1 |\n",
       "| 3 | 3 | 2020-02-26 | Nara |  -4 |  3 |  -5 |  -5 |   1 |  1 |\n",
       "| 4 | 4 | 2020-02-27 | Nara |  -3 |  6 |  -4 |  -7 |   0 |  1 |\n",
       "| 5 | 5 | 2020-02-28 | Nara |  -2 | 14 |  -4 | -10 |   1 |  2 |\n",
       "| 6 | 6 | 2020-02-29 | Nara | -10 |  9 | -22 | -21 |   3 |  4 |\n",
       "\n"
      ],
      "text/plain": [
       "  X date       prefecture retail grocery parks transit workplaces residential\n",
       "1 1 2020-02-24 Nara        18     4       54   -27     -55        14         \n",
       "2 2 2020-02-25 Nara         0     7        0    -2       1         1         \n",
       "3 3 2020-02-26 Nara        -4     3       -5    -5       1         1         \n",
       "4 4 2020-02-27 Nara        -3     6       -4    -7       0         1         \n",
       "5 5 2020-02-28 Nara        -2    14       -4   -10       1         2         \n",
       "6 6 2020-02-29 Nara       -10     9      -22   -21       3         4         "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "google_final_dt %>% head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Population density data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 12</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>prefecture</th><th scope=col>X</th><th scope=col>date</th><th scope=col>retail</th><th scope=col>grocery</th><th scope=col>parks</th><th scope=col>transit</th><th scope=col>workplaces</th><th scope=col>residential</th><th scope=col>density</th><th scope=col>popsize</th><th scope=col>normal_density</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>Aichi</td><td>17889</td><td>2020-02-24</td><td> 18</td><td> 4</td><td> 54</td><td>-27</td><td>-55</td><td>14</td><td>1447</td><td>7552</td><td>0.04697289</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>Aichi</td><td>17890</td><td>2020-02-25</td><td>  0</td><td> 7</td><td>  0</td><td> -2</td><td>  1</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>Aichi</td><td>17891</td><td>2020-02-26</td><td> -4</td><td> 3</td><td> -5</td><td> -5</td><td>  1</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>Aichi</td><td>17892</td><td>2020-02-27</td><td> -3</td><td> 6</td><td> -4</td><td> -7</td><td>  0</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>Aichi</td><td>17893</td><td>2020-02-28</td><td> -2</td><td>14</td><td> -4</td><td>-10</td><td>  1</td><td> 2</td><td>1447</td><td>7552</td><td>0.04697289</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>Aichi</td><td>17894</td><td>2020-02-29</td><td>-10</td><td> 9</td><td>-22</td><td>-21</td><td>  3</td><td> 4</td><td>1447</td><td>7552</td><td>0.04697289</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 12\n",
       "\\begin{tabular}{r|llllllllllll}\n",
       "  & prefecture & X & date & retail & grocery & parks & transit & workplaces & residential & density & popsize & normal\\_density\\\\\n",
       "  & <chr> & <int> & <date> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & Aichi & 17889 & 2020-02-24 &  18 &  4 &  54 & -27 & -55 & 14 & 1447 & 7552 & 0.04697289\\\\\n",
       "\t2 & Aichi & 17890 & 2020-02-25 &   0 &  7 &   0 &  -2 &   1 &  1 & 1447 & 7552 & 0.04697289\\\\\n",
       "\t3 & Aichi & 17891 & 2020-02-26 &  -4 &  3 &  -5 &  -5 &   1 &  1 & 1447 & 7552 & 0.04697289\\\\\n",
       "\t4 & Aichi & 17892 & 2020-02-27 &  -3 &  6 &  -4 &  -7 &   0 &  1 & 1447 & 7552 & 0.04697289\\\\\n",
       "\t5 & Aichi & 17893 & 2020-02-28 &  -2 & 14 &  -4 & -10 &   1 &  2 & 1447 & 7552 & 0.04697289\\\\\n",
       "\t6 & Aichi & 17894 & 2020-02-29 & -10 &  9 & -22 & -21 &   3 &  4 & 1447 & 7552 & 0.04697289\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 12\n",
       "\n",
       "| <!--/--> | prefecture &lt;chr&gt; | X &lt;int&gt; | date &lt;date&gt; | retail &lt;int&gt; | grocery &lt;int&gt; | parks &lt;int&gt; | transit &lt;int&gt; | workplaces &lt;int&gt; | residential &lt;int&gt; | density &lt;int&gt; | popsize &lt;int&gt; | normal_density &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | Aichi | 17889 | 2020-02-24 |  18 |  4 |  54 | -27 | -55 | 14 | 1447 | 7552 | 0.04697289 |\n",
       "| 2 | Aichi | 17890 | 2020-02-25 |   0 |  7 |   0 |  -2 |   1 |  1 | 1447 | 7552 | 0.04697289 |\n",
       "| 3 | Aichi | 17891 | 2020-02-26 |  -4 |  3 |  -5 |  -5 |   1 |  1 | 1447 | 7552 | 0.04697289 |\n",
       "| 4 | Aichi | 17892 | 2020-02-27 |  -3 |  6 |  -4 |  -7 |   0 |  1 | 1447 | 7552 | 0.04697289 |\n",
       "| 5 | Aichi | 17893 | 2020-02-28 |  -2 | 14 |  -4 | -10 |   1 |  2 | 1447 | 7552 | 0.04697289 |\n",
       "| 6 | Aichi | 17894 | 2020-02-29 | -10 |  9 | -22 | -21 |   3 |  4 | 1447 | 7552 | 0.04697289 |\n",
       "\n"
      ],
      "text/plain": [
       "  prefecture X     date       retail grocery parks transit workplaces\n",
       "1 Aichi      17889 2020-02-24  18     4       54   -27     -55       \n",
       "2 Aichi      17890 2020-02-25   0     7        0    -2       1       \n",
       "3 Aichi      17891 2020-02-26  -4     3       -5    -5       1       \n",
       "4 Aichi      17892 2020-02-27  -3     6       -4    -7       0       \n",
       "5 Aichi      17893 2020-02-28  -2    14       -4   -10       1       \n",
       "6 Aichi      17894 2020-02-29 -10     9      -22   -21       3       \n",
       "  residential density popsize normal_density\n",
       "1 14          1447    7552    0.04697289    \n",
       "2  1          1447    7552    0.04697289    \n",
       "3  1          1447    7552    0.04697289    \n",
       "4  1          1447    7552    0.04697289    \n",
       "5  2          1447    7552    0.04697289    \n",
       "6  4          1447    7552    0.04697289    "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Density %<>% mutate(normal_density = density/sum(density))\n",
    "\n",
    "merge(google_final_dt, Density, by=\"prefecture\", all.x=TRUE) -> google_final_dt\n",
    "google_final_dt %<>% filter(date >= Start_date) %>% filter(date <= Final_date) %>% arrange(prefecture, date)\n",
    "\n",
    "google_final_dt %>% head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Temperature data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "read.csv(\"temp_data.csv\") -> temp_data\n",
    "temp_data <- temp_data[,-1]\n",
    "\n",
    "as.Date(temp_data$date, \"%m/%d/%Y\") -> temp_data$date\n",
    "\n",
    "temp_data %>% gather(date, temperature) -> temp1\n",
    "colnames(temp1) <- c(\"prefecture\", \"temperature\")\n",
    "\n",
    "rep(temp_data$date, length(prefecture_name)) %>% as.data.frame() -> temp2\n",
    "colnames(temp2) <- c(\"date\")\n",
    "\n",
    "cbind(temp1, temp2) -> temp_data\n",
    "temp_data %<>% dplyr::select(date, prefecture, temperature) %>% filter(date >= Start_date) %>% filter(date <= Final_date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Intermediate merge of Google mobility and Temperature data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 13</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>date</th><th scope=col>prefecture</th><th scope=col>X</th><th scope=col>retail</th><th scope=col>grocery</th><th scope=col>parks</th><th scope=col>transit</th><th scope=col>workplaces</th><th scope=col>residential</th><th scope=col>density</th><th scope=col>popsize</th><th scope=col>normal_density</th><th scope=col>temperature</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>2020-02-24</td><td>Aichi </td><td>17889</td><td>18</td><td>4</td><td>54</td><td>-27</td><td>-55</td><td>14</td><td>1447</td><td>7552</td><td>0.046972894</td><td> 8.8</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2020-02-24</td><td>Akita </td><td>16225</td><td>18</td><td>4</td><td>54</td><td>-27</td><td>-55</td><td>14</td><td>  88</td><td> 966</td><td>0.002856679</td><td> 6.9</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>2020-02-24</td><td>Aomori</td><td> 6241</td><td>18</td><td>4</td><td>54</td><td>-27</td><td>-55</td><td>14</td><td> 136</td><td>1246</td><td>0.004414868</td><td> 3.9</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>2020-02-24</td><td>Chiba </td><td>14561</td><td>18</td><td>4</td><td>54</td><td>-27</td><td>-55</td><td>14</td><td>1207</td><td>6259</td><td>0.039181951</td><td>10.4</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>2020-02-24</td><td>Ehime </td><td> 9153</td><td>18</td><td>4</td><td>54</td><td>-27</td><td>-55</td><td>14</td><td> 244</td><td>1339</td><td>0.007920792</td><td> 8.9</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>2020-02-24</td><td>Fukui </td><td> 7905</td><td>18</td><td>4</td><td>54</td><td>-27</td><td>-55</td><td>14</td><td> 188</td><td> 768</td><td>0.006102905</td><td> 7.7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 13\n",
       "\\begin{tabular}{r|lllllllllllll}\n",
       "  & date & prefecture & X & retail & grocery & parks & transit & workplaces & residential & density & popsize & normal\\_density & temperature\\\\\n",
       "  & <date> & <chr> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & 2020-02-24 & Aichi  & 17889 & 18 & 4 & 54 & -27 & -55 & 14 & 1447 & 7552 & 0.046972894 &  8.8\\\\\n",
       "\t2 & 2020-02-24 & Akita  & 16225 & 18 & 4 & 54 & -27 & -55 & 14 &   88 &  966 & 0.002856679 &  6.9\\\\\n",
       "\t3 & 2020-02-24 & Aomori &  6241 & 18 & 4 & 54 & -27 & -55 & 14 &  136 & 1246 & 0.004414868 &  3.9\\\\\n",
       "\t4 & 2020-02-24 & Chiba  & 14561 & 18 & 4 & 54 & -27 & -55 & 14 & 1207 & 6259 & 0.039181951 & 10.4\\\\\n",
       "\t5 & 2020-02-24 & Ehime  &  9153 & 18 & 4 & 54 & -27 & -55 & 14 &  244 & 1339 & 0.007920792 &  8.9\\\\\n",
       "\t6 & 2020-02-24 & Fukui  &  7905 & 18 & 4 & 54 & -27 & -55 & 14 &  188 &  768 & 0.006102905 &  7.7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 13\n",
       "\n",
       "| <!--/--> | date &lt;date&gt; | prefecture &lt;chr&gt; | X &lt;int&gt; | retail &lt;int&gt; | grocery &lt;int&gt; | parks &lt;int&gt; | transit &lt;int&gt; | workplaces &lt;int&gt; | residential &lt;int&gt; | density &lt;int&gt; | popsize &lt;int&gt; | normal_density &lt;dbl&gt; | temperature &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | 2020-02-24 | Aichi  | 17889 | 18 | 4 | 54 | -27 | -55 | 14 | 1447 | 7552 | 0.046972894 |  8.8 |\n",
       "| 2 | 2020-02-24 | Akita  | 16225 | 18 | 4 | 54 | -27 | -55 | 14 |   88 |  966 | 0.002856679 |  6.9 |\n",
       "| 3 | 2020-02-24 | Aomori |  6241 | 18 | 4 | 54 | -27 | -55 | 14 |  136 | 1246 | 0.004414868 |  3.9 |\n",
       "| 4 | 2020-02-24 | Chiba  | 14561 | 18 | 4 | 54 | -27 | -55 | 14 | 1207 | 6259 | 0.039181951 | 10.4 |\n",
       "| 5 | 2020-02-24 | Ehime  |  9153 | 18 | 4 | 54 | -27 | -55 | 14 |  244 | 1339 | 0.007920792 |  8.9 |\n",
       "| 6 | 2020-02-24 | Fukui  |  7905 | 18 | 4 | 54 | -27 | -55 | 14 |  188 |  768 | 0.006102905 |  7.7 |\n",
       "\n"
      ],
      "text/plain": [
       "  date       prefecture X     retail grocery parks transit workplaces\n",
       "1 2020-02-24 Aichi      17889 18     4       54    -27     -55       \n",
       "2 2020-02-24 Akita      16225 18     4       54    -27     -55       \n",
       "3 2020-02-24 Aomori      6241 18     4       54    -27     -55       \n",
       "4 2020-02-24 Chiba      14561 18     4       54    -27     -55       \n",
       "5 2020-02-24 Ehime       9153 18     4       54    -27     -55       \n",
       "6 2020-02-24 Fukui       7905 18     4       54    -27     -55       \n",
       "  residential density popsize normal_density temperature\n",
       "1 14          1447    7552    0.046972894     8.8       \n",
       "2 14            88     966    0.002856679     6.9       \n",
       "3 14           136    1246    0.004414868     3.9       \n",
       "4 14          1207    6259    0.039181951    10.4       \n",
       "5 14           244    1339    0.007920792     8.9       \n",
       "6 14           188     768    0.006102905     7.7       "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 13</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>date</th><th scope=col>prefecture</th><th scope=col>X</th><th scope=col>retail</th><th scope=col>grocery</th><th scope=col>parks</th><th scope=col>transit</th><th scope=col>workplaces</th><th scope=col>residential</th><th scope=col>density</th><th scope=col>popsize</th><th scope=col>normal_density</th><th scope=col>temperature</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>16116</th><td>2021-01-31</td><td>Tottori  </td><td> 2007</td><td>-19</td><td>-3</td><td>-16</td><td>-38</td><td>-10</td><td>6</td><td>164</td><td> 556</td><td>0.005323811</td><td> 4.6</td></tr>\n",
       "\t<tr><th scope=row>16117</th><td>2021-01-31</td><td>Toyama   </td><td>14071</td><td>-19</td><td>-3</td><td>-16</td><td>-38</td><td>-10</td><td>6</td><td>251</td><td>1044</td><td>0.008148028</td><td> 2.3</td></tr>\n",
       "\t<tr><th scope=row>16118</th><td>2021-01-31</td><td>Wakayama </td><td> 8663</td><td>-19</td><td>-3</td><td>-16</td><td>-38</td><td>-10</td><td>6</td><td>204</td><td> 925</td><td>0.006622302</td><td> 7.5</td></tr>\n",
       "\t<tr><th scope=row>16119</th><td>2021-01-31</td><td>Yamagata </td><td> 7831</td><td>-19</td><td>-3</td><td>-16</td><td>-38</td><td>-10</td><td>6</td><td>121</td><td>1078</td><td>0.003927934</td><td>-1.4</td></tr>\n",
       "\t<tr><th scope=row>16120</th><td>2021-01-31</td><td>Yamaguchi</td><td> 1591</td><td>-19</td><td>-3</td><td>-16</td><td>-38</td><td>-10</td><td>6</td><td>230</td><td>1358</td><td>0.007466320</td><td> 5.6</td></tr>\n",
       "\t<tr><th scope=row>16121</th><td>2021-01-31</td><td>Yamanashi</td><td> 3671</td><td>-19</td><td>-3</td><td>-16</td><td>-38</td><td>-10</td><td>6</td><td>187</td><td> 811</td><td>0.006070443</td><td> 3.8</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 13\n",
       "\\begin{tabular}{r|lllllllllllll}\n",
       "  & date & prefecture & X & retail & grocery & parks & transit & workplaces & residential & density & popsize & normal\\_density & temperature\\\\\n",
       "  & <date> & <chr> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t16116 & 2021-01-31 & Tottori   &  2007 & -19 & -3 & -16 & -38 & -10 & 6 & 164 &  556 & 0.005323811 &  4.6\\\\\n",
       "\t16117 & 2021-01-31 & Toyama    & 14071 & -19 & -3 & -16 & -38 & -10 & 6 & 251 & 1044 & 0.008148028 &  2.3\\\\\n",
       "\t16118 & 2021-01-31 & Wakayama  &  8663 & -19 & -3 & -16 & -38 & -10 & 6 & 204 &  925 & 0.006622302 &  7.5\\\\\n",
       "\t16119 & 2021-01-31 & Yamagata  &  7831 & -19 & -3 & -16 & -38 & -10 & 6 & 121 & 1078 & 0.003927934 & -1.4\\\\\n",
       "\t16120 & 2021-01-31 & Yamaguchi &  1591 & -19 & -3 & -16 & -38 & -10 & 6 & 230 & 1358 & 0.007466320 &  5.6\\\\\n",
       "\t16121 & 2021-01-31 & Yamanashi &  3671 & -19 & -3 & -16 & -38 & -10 & 6 & 187 &  811 & 0.006070443 &  3.8\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 13\n",
       "\n",
       "| <!--/--> | date &lt;date&gt; | prefecture &lt;chr&gt; | X &lt;int&gt; | retail &lt;int&gt; | grocery &lt;int&gt; | parks &lt;int&gt; | transit &lt;int&gt; | workplaces &lt;int&gt; | residential &lt;int&gt; | density &lt;int&gt; | popsize &lt;int&gt; | normal_density &lt;dbl&gt; | temperature &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 16116 | 2021-01-31 | Tottori   |  2007 | -19 | -3 | -16 | -38 | -10 | 6 | 164 |  556 | 0.005323811 |  4.6 |\n",
       "| 16117 | 2021-01-31 | Toyama    | 14071 | -19 | -3 | -16 | -38 | -10 | 6 | 251 | 1044 | 0.008148028 |  2.3 |\n",
       "| 16118 | 2021-01-31 | Wakayama  |  8663 | -19 | -3 | -16 | -38 | -10 | 6 | 204 |  925 | 0.006622302 |  7.5 |\n",
       "| 16119 | 2021-01-31 | Yamagata  |  7831 | -19 | -3 | -16 | -38 | -10 | 6 | 121 | 1078 | 0.003927934 | -1.4 |\n",
       "| 16120 | 2021-01-31 | Yamaguchi |  1591 | -19 | -3 | -16 | -38 | -10 | 6 | 230 | 1358 | 0.007466320 |  5.6 |\n",
       "| 16121 | 2021-01-31 | Yamanashi |  3671 | -19 | -3 | -16 | -38 | -10 | 6 | 187 |  811 | 0.006070443 |  3.8 |\n",
       "\n"
      ],
      "text/plain": [
       "      date       prefecture X     retail grocery parks transit workplaces\n",
       "16116 2021-01-31 Tottori     2007 -19    -3      -16   -38     -10       \n",
       "16117 2021-01-31 Toyama     14071 -19    -3      -16   -38     -10       \n",
       "16118 2021-01-31 Wakayama    8663 -19    -3      -16   -38     -10       \n",
       "16119 2021-01-31 Yamagata    7831 -19    -3      -16   -38     -10       \n",
       "16120 2021-01-31 Yamaguchi   1591 -19    -3      -16   -38     -10       \n",
       "16121 2021-01-31 Yamanashi   3671 -19    -3      -16   -38     -10       \n",
       "      residential density popsize normal_density temperature\n",
       "16116 6           164      556    0.005323811     4.6       \n",
       "16117 6           251     1044    0.008148028     2.3       \n",
       "16118 6           204      925    0.006622302     7.5       \n",
       "16119 6           121     1078    0.003927934    -1.4       \n",
       "16120 6           230     1358    0.007466320     5.6       \n",
       "16121 6           187      811    0.006070443     3.8       "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "merge(google_final_dt, temp_data, by=c(\"date\", \"prefecture\")) -> data_gootemp\n",
    "data_gootemp %>% head()\n",
    "data_gootemp %>% tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rt data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Selecting specific prefectures before Rt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'Osaka'</li><li>'Tokyo'</li><li>'Aichi'</li><li>'Hokkaido'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'Osaka'\n",
       "\\item 'Tokyo'\n",
       "\\item 'Aichi'\n",
       "\\item 'Hokkaido'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'Osaka'\n",
       "2. 'Tokyo'\n",
       "3. 'Aichi'\n",
       "4. 'Hokkaido'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"Osaka\"    \"Tokyo\"    \"Aichi\"    \"Hokkaido\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "4"
      ],
      "text/latex": [
       "4"
      ],
      "text/markdown": [
       "4"
      ],
      "text/plain": [
       "[1] 4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "(prefecture_name <- c(\"Osaka\", \"Tokyo\", \"Aichi\", \"Hokkaido\"))\n",
    "length(prefecture_name)\n",
    "\n",
    "data_gootemp %<>% filter(prefecture %in% prefecture_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'Osaka_Rt.csv'</li><li>'Tokyo_Rt.csv'</li><li>'Aichi_Rt.csv'</li><li>'Hokkaido_Rt.csv'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'Osaka\\_Rt.csv'\n",
       "\\item 'Tokyo\\_Rt.csv'\n",
       "\\item 'Aichi\\_Rt.csv'\n",
       "\\item 'Hokkaido\\_Rt.csv'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'Osaka_Rt.csv'\n",
       "2. 'Tokyo_Rt.csv'\n",
       "3. 'Aichi_Rt.csv'\n",
       "4. 'Hokkaido_Rt.csv'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"Osaka_Rt.csv\"    \"Tokyo_Rt.csv\"    \"Aichi_Rt.csv\"    \"Hokkaido_Rt.csv\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## making directory as an object\n",
    "src_dir <- c(\"../../TokyoEOC_Real_time-Reff-Tokyo-2020/scripts/Sungmok/excels\")\n",
    "scr_file <- list.files(src_dir)\n",
    "\n",
    "scr_files <- rep(0, length(prefecture_name))\n",
    "\n",
    "for (i in 1:length(prefecture_name)){\n",
    "scr_file[grep(prefecture_name[i], scr_file)] -> scr_files[i]}\n",
    "\n",
    "scr_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "read_data <- list()\n",
    "\n",
    "for (i in 1:length(scr_files)){\n",
    "  assign(paste0(\"Rt_\", prefecture_name[i]), \n",
    "         read.csv(paste0(src_dir, \"/\", scr_files[i])) %>% mutate(prefecture = prefecture_name[i]) %>%\n",
    "         dplyr::select(prefecture, onset, imported_delay, domestic_delay, Rt, lower, upper) %>% \n",
    "         rename(date = onset) %>%\n",
    "         filter(date <= Final_date) %>% filter(!is.na(Rt)) %>%\n",
    "         mutate(date = as.Date(date))) -> read_data[[i]]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 18</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>date</th><th scope=col>prefecture</th><th scope=col>X</th><th scope=col>retail</th><th scope=col>grocery</th><th scope=col>parks</th><th scope=col>transit</th><th scope=col>workplaces</th><th scope=col>residential</th><th scope=col>density</th><th scope=col>popsize</th><th scope=col>normal_density</th><th scope=col>temperature</th><th scope=col>imported_delay</th><th scope=col>domestic_delay</th><th scope=col>Rt</th><th scope=col>lower</th><th scope=col>upper</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>2020-02-24</td><td>Aichi</td><td>17889</td><td> 18</td><td> 4</td><td> 54</td><td>-27</td><td>-55</td><td>14</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 8.8</td><td>0.34094816</td><td>2.445036</td><td>0.6314886</td><td>0.14</td><td>1.78</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2020-02-25</td><td>Aichi</td><td>17890</td><td>  0</td><td> 7</td><td>  0</td><td> -2</td><td>  1</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 8.6</td><td>0.30431286</td><td>2.422954</td><td>0.6292124</td><td>0.13</td><td>1.78</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>2020-02-26</td><td>Aichi</td><td>17891</td><td> -4</td><td> 3</td><td> -5</td><td> -5</td><td>  1</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td><td>10.8</td><td>0.15232624</td><td>3.164566</td><td>0.8484080</td><td>0.23</td><td>2.15</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>2020-02-27</td><td>Aichi</td><td>17892</td><td> -3</td><td> 6</td><td> -4</td><td> -7</td><td>  0</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 6.8</td><td>0.04383969</td><td>4.734461</td><td>1.3319541</td><td>0.47</td><td>2.91</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>2020-02-28</td><td>Aichi</td><td>17893</td><td> -2</td><td>14</td><td> -4</td><td>-10</td><td>  1</td><td> 2</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 6.9</td><td>0.03438756</td><td>6.631267</td><td>1.9410919</td><td>0.82</td><td>3.81</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>2020-02-29</td><td>Aichi</td><td>17894</td><td>-10</td><td> 9</td><td>-22</td><td>-21</td><td>  3</td><td> 4</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 7.7</td><td>0.11628163</td><td>8.238059</td><td>2.3937786</td><td>1.11</td><td>4.41</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 18\n",
       "\\begin{tabular}{r|llllllllllllllllll}\n",
       "  & date & prefecture & X & retail & grocery & parks & transit & workplaces & residential & density & popsize & normal\\_density & temperature & imported\\_delay & domestic\\_delay & Rt & lower & upper\\\\\n",
       "  & <date> & <chr> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & 2020-02-24 & Aichi & 17889 &  18 &  4 &  54 & -27 & -55 & 14 & 1447 & 7552 & 0.04697289 &  8.8 & 0.34094816 & 2.445036 & 0.6314886 & 0.14 & 1.78\\\\\n",
       "\t2 & 2020-02-25 & Aichi & 17890 &   0 &  7 &   0 &  -2 &   1 &  1 & 1447 & 7552 & 0.04697289 &  8.6 & 0.30431286 & 2.422954 & 0.6292124 & 0.13 & 1.78\\\\\n",
       "\t3 & 2020-02-26 & Aichi & 17891 &  -4 &  3 &  -5 &  -5 &   1 &  1 & 1447 & 7552 & 0.04697289 & 10.8 & 0.15232624 & 3.164566 & 0.8484080 & 0.23 & 2.15\\\\\n",
       "\t4 & 2020-02-27 & Aichi & 17892 &  -3 &  6 &  -4 &  -7 &   0 &  1 & 1447 & 7552 & 0.04697289 &  6.8 & 0.04383969 & 4.734461 & 1.3319541 & 0.47 & 2.91\\\\\n",
       "\t5 & 2020-02-28 & Aichi & 17893 &  -2 & 14 &  -4 & -10 &   1 &  2 & 1447 & 7552 & 0.04697289 &  6.9 & 0.03438756 & 6.631267 & 1.9410919 & 0.82 & 3.81\\\\\n",
       "\t6 & 2020-02-29 & Aichi & 17894 & -10 &  9 & -22 & -21 &   3 &  4 & 1447 & 7552 & 0.04697289 &  7.7 & 0.11628163 & 8.238059 & 2.3937786 & 1.11 & 4.41\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 18\n",
       "\n",
       "| <!--/--> | date &lt;date&gt; | prefecture &lt;chr&gt; | X &lt;int&gt; | retail &lt;int&gt; | grocery &lt;int&gt; | parks &lt;int&gt; | transit &lt;int&gt; | workplaces &lt;int&gt; | residential &lt;int&gt; | density &lt;int&gt; | popsize &lt;int&gt; | normal_density &lt;dbl&gt; | temperature &lt;dbl&gt; | imported_delay &lt;dbl&gt; | domestic_delay &lt;dbl&gt; | Rt &lt;dbl&gt; | lower &lt;dbl&gt; | upper &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | 2020-02-24 | Aichi | 17889 |  18 |  4 |  54 | -27 | -55 | 14 | 1447 | 7552 | 0.04697289 |  8.8 | 0.34094816 | 2.445036 | 0.6314886 | 0.14 | 1.78 |\n",
       "| 2 | 2020-02-25 | Aichi | 17890 |   0 |  7 |   0 |  -2 |   1 |  1 | 1447 | 7552 | 0.04697289 |  8.6 | 0.30431286 | 2.422954 | 0.6292124 | 0.13 | 1.78 |\n",
       "| 3 | 2020-02-26 | Aichi | 17891 |  -4 |  3 |  -5 |  -5 |   1 |  1 | 1447 | 7552 | 0.04697289 | 10.8 | 0.15232624 | 3.164566 | 0.8484080 | 0.23 | 2.15 |\n",
       "| 4 | 2020-02-27 | Aichi | 17892 |  -3 |  6 |  -4 |  -7 |   0 |  1 | 1447 | 7552 | 0.04697289 |  6.8 | 0.04383969 | 4.734461 | 1.3319541 | 0.47 | 2.91 |\n",
       "| 5 | 2020-02-28 | Aichi | 17893 |  -2 | 14 |  -4 | -10 |   1 |  2 | 1447 | 7552 | 0.04697289 |  6.9 | 0.03438756 | 6.631267 | 1.9410919 | 0.82 | 3.81 |\n",
       "| 6 | 2020-02-29 | Aichi | 17894 | -10 |  9 | -22 | -21 |   3 |  4 | 1447 | 7552 | 0.04697289 |  7.7 | 0.11628163 | 8.238059 | 2.3937786 | 1.11 | 4.41 |\n",
       "\n"
      ],
      "text/plain": [
       "  date       prefecture X     retail grocery parks transit workplaces\n",
       "1 2020-02-24 Aichi      17889  18     4       54   -27     -55       \n",
       "2 2020-02-25 Aichi      17890   0     7        0    -2       1       \n",
       "3 2020-02-26 Aichi      17891  -4     3       -5    -5       1       \n",
       "4 2020-02-27 Aichi      17892  -3     6       -4    -7       0       \n",
       "5 2020-02-28 Aichi      17893  -2    14       -4   -10       1       \n",
       "6 2020-02-29 Aichi      17894 -10     9      -22   -21       3       \n",
       "  residential density popsize normal_density temperature imported_delay\n",
       "1 14          1447    7552    0.04697289      8.8        0.34094816    \n",
       "2  1          1447    7552    0.04697289      8.6        0.30431286    \n",
       "3  1          1447    7552    0.04697289     10.8        0.15232624    \n",
       "4  1          1447    7552    0.04697289      6.8        0.04383969    \n",
       "5  2          1447    7552    0.04697289      6.9        0.03438756    \n",
       "6  4          1447    7552    0.04697289      7.7        0.11628163    \n",
       "  domestic_delay Rt        lower upper\n",
       "1 2.445036       0.6314886 0.14  1.78 \n",
       "2 2.422954       0.6292124 0.13  1.78 \n",
       "3 3.164566       0.8484080 0.23  2.15 \n",
       "4 4.734461       1.3319541 0.47  2.91 \n",
       "5 6.631267       1.9410919 0.82  3.81 \n",
       "6 8.238059       2.3937786 1.11  4.41 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "do.call(\"rbind\", read_data) -> final_Rt\n",
    "\n",
    "merge(data_gootemp, final_Rt, by=c(\"date\", \"prefecture\")) -> final_data\n",
    "\n",
    "final_data %<>% filter(date >= Start_date) %>% filter(date <= Final_date) %>% filter(!is.na(Rt)) %>%\n",
    "arrange(prefecture, date)\n",
    "\n",
    "final_data %>% head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Merging the number of reported cases on day t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 19</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>date</th><th scope=col>prefecture</th><th scope=col>X</th><th scope=col>retail</th><th scope=col>grocery</th><th scope=col>parks</th><th scope=col>transit</th><th scope=col>workplaces</th><th scope=col>residential</th><th scope=col>density</th><th scope=col>popsize</th><th scope=col>normal_density</th><th scope=col>temperature</th><th scope=col>imported_delay</th><th scope=col>domestic_delay</th><th scope=col>Rt</th><th scope=col>lower</th><th scope=col>upper</th><th scope=col>reported</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;int&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>2020-02-24</td><td>Aichi</td><td>17889</td><td> 18</td><td> 4</td><td> 54</td><td>-27</td><td>-55</td><td>14</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 8.8</td><td>0.34094816</td><td>2.445036</td><td>0.6314886</td><td>0.14</td><td>1.78</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2020-02-25</td><td>Aichi</td><td>17890</td><td>  0</td><td> 7</td><td>  0</td><td> -2</td><td>  1</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 8.6</td><td>0.30431286</td><td>2.422954</td><td>0.6292124</td><td>0.13</td><td>1.78</td><td>3</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>2020-02-26</td><td>Aichi</td><td>17891</td><td> -4</td><td> 3</td><td> -5</td><td> -5</td><td>  1</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td><td>10.8</td><td>0.15232624</td><td>3.164566</td><td>0.8484080</td><td>0.23</td><td>2.15</td><td>5</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>2020-02-27</td><td>Aichi</td><td>17892</td><td> -3</td><td> 6</td><td> -4</td><td> -7</td><td>  0</td><td> 1</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 6.8</td><td>0.04383969</td><td>4.734461</td><td>1.3319541</td><td>0.47</td><td>2.91</td><td>2</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>2020-02-28</td><td>Aichi</td><td>17893</td><td> -2</td><td>14</td><td> -4</td><td>-10</td><td>  1</td><td> 2</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 6.9</td><td>0.03438756</td><td>6.631267</td><td>1.9410919</td><td>0.82</td><td>3.81</td><td>1</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>2020-02-29</td><td>Aichi</td><td>17894</td><td>-10</td><td> 9</td><td>-22</td><td>-21</td><td>  3</td><td> 4</td><td>1447</td><td>7552</td><td>0.04697289</td><td> 7.7</td><td>0.11628163</td><td>8.238059</td><td>2.3937786</td><td>1.11</td><td>4.41</td><td>1</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 19\n",
       "\\begin{tabular}{r|lllllllllllllllllll}\n",
       "  & date & prefecture & X & retail & grocery & parks & transit & workplaces & residential & density & popsize & normal\\_density & temperature & imported\\_delay & domestic\\_delay & Rt & lower & upper & reported\\\\\n",
       "  & <date> & <chr> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <int>\\\\\n",
       "\\hline\n",
       "\t1 & 2020-02-24 & Aichi & 17889 &  18 &  4 &  54 & -27 & -55 & 14 & 1447 & 7552 & 0.04697289 &  8.8 & 0.34094816 & 2.445036 & 0.6314886 & 0.14 & 1.78 & 0\\\\\n",
       "\t2 & 2020-02-25 & Aichi & 17890 &   0 &  7 &   0 &  -2 &   1 &  1 & 1447 & 7552 & 0.04697289 &  8.6 & 0.30431286 & 2.422954 & 0.6292124 & 0.13 & 1.78 & 3\\\\\n",
       "\t3 & 2020-02-26 & Aichi & 17891 &  -4 &  3 &  -5 &  -5 &   1 &  1 & 1447 & 7552 & 0.04697289 & 10.8 & 0.15232624 & 3.164566 & 0.8484080 & 0.23 & 2.15 & 5\\\\\n",
       "\t4 & 2020-02-27 & Aichi & 17892 &  -3 &  6 &  -4 &  -7 &   0 &  1 & 1447 & 7552 & 0.04697289 &  6.8 & 0.04383969 & 4.734461 & 1.3319541 & 0.47 & 2.91 & 2\\\\\n",
       "\t5 & 2020-02-28 & Aichi & 17893 &  -2 & 14 &  -4 & -10 &   1 &  2 & 1447 & 7552 & 0.04697289 &  6.9 & 0.03438756 & 6.631267 & 1.9410919 & 0.82 & 3.81 & 1\\\\\n",
       "\t6 & 2020-02-29 & Aichi & 17894 & -10 &  9 & -22 & -21 &   3 &  4 & 1447 & 7552 & 0.04697289 &  7.7 & 0.11628163 & 8.238059 & 2.3937786 & 1.11 & 4.41 & 1\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 19\n",
       "\n",
       "| <!--/--> | date &lt;date&gt; | prefecture &lt;chr&gt; | X &lt;int&gt; | retail &lt;int&gt; | grocery &lt;int&gt; | parks &lt;int&gt; | transit &lt;int&gt; | workplaces &lt;int&gt; | residential &lt;int&gt; | density &lt;int&gt; | popsize &lt;int&gt; | normal_density &lt;dbl&gt; | temperature &lt;dbl&gt; | imported_delay &lt;dbl&gt; | domestic_delay &lt;dbl&gt; | Rt &lt;dbl&gt; | lower &lt;dbl&gt; | upper &lt;dbl&gt; | reported &lt;int&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | 2020-02-24 | Aichi | 17889 |  18 |  4 |  54 | -27 | -55 | 14 | 1447 | 7552 | 0.04697289 |  8.8 | 0.34094816 | 2.445036 | 0.6314886 | 0.14 | 1.78 | 0 |\n",
       "| 2 | 2020-02-25 | Aichi | 17890 |   0 |  7 |   0 |  -2 |   1 |  1 | 1447 | 7552 | 0.04697289 |  8.6 | 0.30431286 | 2.422954 | 0.6292124 | 0.13 | 1.78 | 3 |\n",
       "| 3 | 2020-02-26 | Aichi | 17891 |  -4 |  3 |  -5 |  -5 |   1 |  1 | 1447 | 7552 | 0.04697289 | 10.8 | 0.15232624 | 3.164566 | 0.8484080 | 0.23 | 2.15 | 5 |\n",
       "| 4 | 2020-02-27 | Aichi | 17892 |  -3 |  6 |  -4 |  -7 |   0 |  1 | 1447 | 7552 | 0.04697289 |  6.8 | 0.04383969 | 4.734461 | 1.3319541 | 0.47 | 2.91 | 2 |\n",
       "| 5 | 2020-02-28 | Aichi | 17893 |  -2 | 14 |  -4 | -10 |   1 |  2 | 1447 | 7552 | 0.04697289 |  6.9 | 0.03438756 | 6.631267 | 1.9410919 | 0.82 | 3.81 | 1 |\n",
       "| 6 | 2020-02-29 | Aichi | 17894 | -10 |  9 | -22 | -21 |   3 |  4 | 1447 | 7552 | 0.04697289 |  7.7 | 0.11628163 | 8.238059 | 2.3937786 | 1.11 | 4.41 | 1 |\n",
       "\n"
      ],
      "text/plain": [
       "  date       prefecture X     retail grocery parks transit workplaces\n",
       "1 2020-02-24 Aichi      17889  18     4       54   -27     -55       \n",
       "2 2020-02-25 Aichi      17890   0     7        0    -2       1       \n",
       "3 2020-02-26 Aichi      17891  -4     3       -5    -5       1       \n",
       "4 2020-02-27 Aichi      17892  -3     6       -4    -7       0       \n",
       "5 2020-02-28 Aichi      17893  -2    14       -4   -10       1       \n",
       "6 2020-02-29 Aichi      17894 -10     9      -22   -21       3       \n",
       "  residential density popsize normal_density temperature imported_delay\n",
       "1 14          1447    7552    0.04697289      8.8        0.34094816    \n",
       "2  1          1447    7552    0.04697289      8.6        0.30431286    \n",
       "3  1          1447    7552    0.04697289     10.8        0.15232624    \n",
       "4  1          1447    7552    0.04697289      6.8        0.04383969    \n",
       "5  2          1447    7552    0.04697289      6.9        0.03438756    \n",
       "6  4          1447    7552    0.04697289      7.7        0.11628163    \n",
       "  domestic_delay Rt        lower upper reported\n",
       "1 2.445036       0.6314886 0.14  1.78  0       \n",
       "2 2.422954       0.6292124 0.13  1.78  3       \n",
       "3 3.164566       0.8484080 0.23  2.15  5       \n",
       "4 4.734461       1.3319541 0.47  2.91  2       \n",
       "5 6.631267       1.9410919 0.82  3.81  1       \n",
       "6 8.238059       2.3937786 1.11  4.41  1       "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "read.csv(\"../../TokyoEOC_Real_time-Reff-Tokyo-2020/scripts/Sungmok/reported.csv\") -> temp\n",
    "temp %<>% filter(prefecture %in% c(\"Osaka\", \"Tokyo\", \"Aichi\", \"Hokkaido\")) %>% \n",
    "rename(date = reported) %>% rename(reported = n)\n",
    "\n",
    "temp %<>%\n",
    "filter(date >= Start_date) %>% filter(date <= Final_date) %>%\n",
    "dplyr::select(-t) %>% dplyr::select(-X)\n",
    "\n",
    "merge(final_data, temp, by=c(\"date\", \"prefecture\")) -> final_data\n",
    "final_data %<>% arrange(prefecture, date)\n",
    "final_data %>% head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7 days of moving average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 30</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>date</th><th scope=col>prefecture</th><th scope=col>X</th><th scope=col>retail</th><th scope=col>grocery</th><th scope=col>parks</th><th scope=col>transit</th><th scope=col>workplaces</th><th scope=col>residential</th><th scope=col>density</th><th scope=col>⋯</th><th scope=col>MVA_lower</th><th scope=col>MVA_upper</th><th scope=col>MVA_temp</th><th scope=col>MVA_retail</th><th scope=col>MVA_grocery</th><th scope=col>MVA_parks</th><th scope=col>MVA_transit</th><th scope=col>MVA_workplaces</th><th scope=col>MVA_residential</th><th scope=col>MVA_reported</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>⋯</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>2020-03-15</td><td>Aichi</td><td>17909</td><td>-7</td><td>5</td><td> 9</td><td>-21</td><td> -3</td><td> 3</td><td>1447</td><td>⋯</td><td>0.09857143</td><td>1.305714</td><td>10.971429</td><td>-6.857143</td><td>1.714286</td><td>-1.142857</td><td>-18.42857</td><td> -4.285714</td><td>4.428571</td><td>5.857143</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2020-03-16</td><td>Aichi</td><td>17910</td><td>-7</td><td>0</td><td>-7</td><td>-15</td><td> -3</td><td> 4</td><td>1447</td><td>⋯</td><td>0.10000000</td><td>1.432857</td><td>10.014286</td><td>-6.857143</td><td>1.428571</td><td>-3.714286</td><td>-18.42857</td><td> -4.285714</td><td>4.428571</td><td>5.285714</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>2020-03-17</td><td>Aichi</td><td>17911</td><td>-1</td><td>4</td><td>14</td><td>-15</td><td> -4</td><td> 4</td><td>1447</td><td>⋯</td><td>0.10285714</td><td>1.551429</td><td> 9.014286</td><td>-5.714286</td><td>2.428571</td><td> 2.285714</td><td>-18.00000</td><td> -4.142857</td><td>4.142857</td><td>3.714286</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>2020-03-18</td><td>Aichi</td><td>17912</td><td>-3</td><td>3</td><td>20</td><td>-14</td><td> -4</td><td> 3</td><td>1447</td><td>⋯</td><td>0.11000000</td><td>1.671429</td><td> 9.014286</td><td>-5.714286</td><td>2.285714</td><td> 3.285714</td><td>-17.71429</td><td> -4.142857</td><td>4.142857</td><td>3.714286</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>2020-03-19</td><td>Aichi</td><td>17913</td><td> 4</td><td>6</td><td>17</td><td>-10</td><td> -4</td><td> 2</td><td>1447</td><td>⋯</td><td>0.13000000</td><td>1.825714</td><td> 9.500000</td><td>-4.714286</td><td>2.428571</td><td> 3.428571</td><td>-17.00000</td><td> -4.142857</td><td>4.000000</td><td>3.285714</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>2020-03-20</td><td>Aichi</td><td>17914</td><td> 7</td><td>6</td><td>40</td><td>-34</td><td>-54</td><td>17</td><td>1447</td><td>⋯</td><td>0.17428571</td><td>2.042857</td><td> 9.442857</td><td>-3.000000</td><td>2.857143</td><td> 7.714286</td><td>-19.42857</td><td>-11.285714</td><td>5.714286</td><td>3.571429</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 30\n",
       "\\begin{tabular}{r|lllllllllllllllllllll}\n",
       "  & date & prefecture & X & retail & grocery & parks & transit & workplaces & residential & density & ⋯ & MVA\\_lower & MVA\\_upper & MVA\\_temp & MVA\\_retail & MVA\\_grocery & MVA\\_parks & MVA\\_transit & MVA\\_workplaces & MVA\\_residential & MVA\\_reported\\\\\n",
       "  & <date> & <chr> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & ⋯ & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & 2020-03-15 & Aichi & 17909 & -7 & 5 &  9 & -21 &  -3 &  3 & 1447 & ⋯ & 0.09857143 & 1.305714 & 10.971429 & -6.857143 & 1.714286 & -1.142857 & -18.42857 &  -4.285714 & 4.428571 & 5.857143\\\\\n",
       "\t2 & 2020-03-16 & Aichi & 17910 & -7 & 0 & -7 & -15 &  -3 &  4 & 1447 & ⋯ & 0.10000000 & 1.432857 & 10.014286 & -6.857143 & 1.428571 & -3.714286 & -18.42857 &  -4.285714 & 4.428571 & 5.285714\\\\\n",
       "\t3 & 2020-03-17 & Aichi & 17911 & -1 & 4 & 14 & -15 &  -4 &  4 & 1447 & ⋯ & 0.10285714 & 1.551429 &  9.014286 & -5.714286 & 2.428571 &  2.285714 & -18.00000 &  -4.142857 & 4.142857 & 3.714286\\\\\n",
       "\t4 & 2020-03-18 & Aichi & 17912 & -3 & 3 & 20 & -14 &  -4 &  3 & 1447 & ⋯ & 0.11000000 & 1.671429 &  9.014286 & -5.714286 & 2.285714 &  3.285714 & -17.71429 &  -4.142857 & 4.142857 & 3.714286\\\\\n",
       "\t5 & 2020-03-19 & Aichi & 17913 &  4 & 6 & 17 & -10 &  -4 &  2 & 1447 & ⋯ & 0.13000000 & 1.825714 &  9.500000 & -4.714286 & 2.428571 &  3.428571 & -17.00000 &  -4.142857 & 4.000000 & 3.285714\\\\\n",
       "\t6 & 2020-03-20 & Aichi & 17914 &  7 & 6 & 40 & -34 & -54 & 17 & 1447 & ⋯ & 0.17428571 & 2.042857 &  9.442857 & -3.000000 & 2.857143 &  7.714286 & -19.42857 & -11.285714 & 5.714286 & 3.571429\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 30\n",
       "\n",
       "| <!--/--> | date &lt;date&gt; | prefecture &lt;chr&gt; | X &lt;int&gt; | retail &lt;int&gt; | grocery &lt;int&gt; | parks &lt;int&gt; | transit &lt;int&gt; | workplaces &lt;int&gt; | residential &lt;int&gt; | density &lt;int&gt; | ⋯ ⋯ | MVA_lower &lt;dbl&gt; | MVA_upper &lt;dbl&gt; | MVA_temp &lt;dbl&gt; | MVA_retail &lt;dbl&gt; | MVA_grocery &lt;dbl&gt; | MVA_parks &lt;dbl&gt; | MVA_transit &lt;dbl&gt; | MVA_workplaces &lt;dbl&gt; | MVA_residential &lt;dbl&gt; | MVA_reported &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | 2020-03-15 | Aichi | 17909 | -7 | 5 |  9 | -21 |  -3 |  3 | 1447 | ⋯ | 0.09857143 | 1.305714 | 10.971429 | -6.857143 | 1.714286 | -1.142857 | -18.42857 |  -4.285714 | 4.428571 | 5.857143 |\n",
       "| 2 | 2020-03-16 | Aichi | 17910 | -7 | 0 | -7 | -15 |  -3 |  4 | 1447 | ⋯ | 0.10000000 | 1.432857 | 10.014286 | -6.857143 | 1.428571 | -3.714286 | -18.42857 |  -4.285714 | 4.428571 | 5.285714 |\n",
       "| 3 | 2020-03-17 | Aichi | 17911 | -1 | 4 | 14 | -15 |  -4 |  4 | 1447 | ⋯ | 0.10285714 | 1.551429 |  9.014286 | -5.714286 | 2.428571 |  2.285714 | -18.00000 |  -4.142857 | 4.142857 | 3.714286 |\n",
       "| 4 | 2020-03-18 | Aichi | 17912 | -3 | 3 | 20 | -14 |  -4 |  3 | 1447 | ⋯ | 0.11000000 | 1.671429 |  9.014286 | -5.714286 | 2.285714 |  3.285714 | -17.71429 |  -4.142857 | 4.142857 | 3.714286 |\n",
       "| 5 | 2020-03-19 | Aichi | 17913 |  4 | 6 | 17 | -10 |  -4 |  2 | 1447 | ⋯ | 0.13000000 | 1.825714 |  9.500000 | -4.714286 | 2.428571 |  3.428571 | -17.00000 |  -4.142857 | 4.000000 | 3.285714 |\n",
       "| 6 | 2020-03-20 | Aichi | 17914 |  7 | 6 | 40 | -34 | -54 | 17 | 1447 | ⋯ | 0.17428571 | 2.042857 |  9.442857 | -3.000000 | 2.857143 |  7.714286 | -19.42857 | -11.285714 | 5.714286 | 3.571429 |\n",
       "\n"
      ],
      "text/plain": [
       "  date       prefecture X     retail grocery parks transit workplaces\n",
       "1 2020-03-15 Aichi      17909 -7     5        9    -21      -3       \n",
       "2 2020-03-16 Aichi      17910 -7     0       -7    -15      -3       \n",
       "3 2020-03-17 Aichi      17911 -1     4       14    -15      -4       \n",
       "4 2020-03-18 Aichi      17912 -3     3       20    -14      -4       \n",
       "5 2020-03-19 Aichi      17913  4     6       17    -10      -4       \n",
       "6 2020-03-20 Aichi      17914  7     6       40    -34     -54       \n",
       "  residential density ⋯ MVA_lower  MVA_upper MVA_temp  MVA_retail MVA_grocery\n",
       "1  3          1447    ⋯ 0.09857143 1.305714  10.971429 -6.857143  1.714286   \n",
       "2  4          1447    ⋯ 0.10000000 1.432857  10.014286 -6.857143  1.428571   \n",
       "3  4          1447    ⋯ 0.10285714 1.551429   9.014286 -5.714286  2.428571   \n",
       "4  3          1447    ⋯ 0.11000000 1.671429   9.014286 -5.714286  2.285714   \n",
       "5  2          1447    ⋯ 0.13000000 1.825714   9.500000 -4.714286  2.428571   \n",
       "6 17          1447    ⋯ 0.17428571 2.042857   9.442857 -3.000000  2.857143   \n",
       "  MVA_parks MVA_transit MVA_workplaces MVA_residential MVA_reported\n",
       "1 -1.142857 -18.42857    -4.285714     4.428571        5.857143    \n",
       "2 -3.714286 -18.42857    -4.285714     4.428571        5.285714    \n",
       "3  2.285714 -18.00000    -4.142857     4.142857        3.714286    \n",
       "4  3.285714 -17.71429    -4.142857     4.142857        3.714286    \n",
       "5  3.428571 -17.00000    -4.142857     4.000000        3.285714    \n",
       "6  7.714286 -19.42857   -11.285714     5.714286        3.571429    "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "MV <- 7\n",
    "temp <- list()\n",
    "\n",
    "for (i in 1:length(prefecture_name)){\n",
    "\n",
    "final_data %>% filter(prefecture==prefecture_name[i]) -> final_data_MV\n",
    "final_data_MV %<>% arrange()\n",
    "\n",
    "MVA <- rep(0, nrow(final_data_MV))\n",
    "MVA_lower <- rep(0, nrow(final_data_MV)); MVA_upper <- rep(0, nrow(final_data_MV));\n",
    "MVA_temp <- rep(0, nrow(final_data_MV));\n",
    "MVA_retail <- rep(0, nrow(final_data_MV)); MVA_grocery <- rep(0, nrow(final_data_MV)); \n",
    "MVA_parks <- rep(0, nrow(final_data_MV)); MVA_transit <- rep(0, nrow(final_data_MV)); \n",
    "MVA_workplaces <- rep(0, nrow(final_data_MV)); MVA_residential <- rep(0, nrow(final_data_MV))\n",
    "MVA_reported <- rep(0, nrow(final_data_MV)); \n",
    "    \n",
    "\n",
    "## Moving average of Rt\n",
    "for (h in 1:nrow(final_data_MV)){    \n",
    "    if(h<=(MV-1)) {MVA[h] = sum(final_data_MV$Rt[1:h])/h}  \n",
    "    else {MVA[h] = (MVA[h] = sum(final_data_MV$Rt[(h-(MV-1)):h])/MV)}\n",
    "}\n",
    "\n",
    "for (h in 1:nrow(final_data_MV)){    \n",
    "    if(h<=(MV-1)) {MVA_lower[h] = sum(final_data_MV$lower[1:h])/h}  \n",
    "    else {MVA_lower[h] = (MVA_lower[h] = sum(final_data_MV$lower[(h-(MV-1)):h])/MV)}\n",
    "}\n",
    "\n",
    "for (h in 1:nrow(final_data_MV)){    \n",
    "    if(h<=(MV-1)) {MVA_upper[h] = sum(final_data_MV$upper[1:h])/h}  \n",
    "    else {MVA_upper[h] = (MVA_upper[h] = sum(final_data_MV$upper[(h-(MV-1)):h])/MV)}\n",
    "}\n",
    "\n",
    "for (k in 1:nrow(final_data_MV)){    \n",
    "    if(k<=(MV-1)) {MVA_temp[k] = sum(final_data_MV$temperature[1:k])/k}  \n",
    "    else {MVA_temp[k] = (MVA_temp[k] = sum(final_data_MV$temperature[(k-(MV-1)):k])/MV)}\n",
    "}\n",
    "\n",
    "\n",
    "for (g in 1:nrow(final_data_MV)){    \n",
    "    if(g<=(MV-1)) {MVA_retail[g] = sum(final_data_MV$retail[1:g])/g}  \n",
    "    else {MVA_retail[g] = (MVA_retail[g] = sum(final_data_MV$retail[(g-(MV-1)):g])/MV)}\n",
    "}\n",
    "\n",
    "for (g in 1:nrow(final_data_MV)){    \n",
    "    if(g<=(MV-1)) {MVA_grocery[g] = sum(final_data_MV$grocery[1:g])/g}  \n",
    "    else {MVA_grocery[g] = (MVA_grocery[g] = sum(final_data_MV$grocery[(g-(MV-1)):g])/MV)}\n",
    "}\n",
    "\n",
    "for (g in 1:nrow(final_data_MV)){    \n",
    "    if(g<=(MV-1)) {MVA_parks[g] = sum(final_data_MV$parks[1:g])/g}  \n",
    "    else {MVA_parks[g] = (MVA_parks[g] = sum(final_data_MV$parks[(g-(MV-1)):g])/MV)}\n",
    "}\n",
    "\n",
    "for (g in 1:nrow(final_data_MV)){    \n",
    "    if(g<=(MV-1)) {MVA_transit[g] = sum(final_data_MV$transit[1:g])/g}  \n",
    "    else {MVA_transit[g] = (MVA_transit[g] = sum(final_data_MV$transit[(g-(MV-1)):g])/MV)}\n",
    "}\n",
    "\n",
    "for (g in 1:nrow(final_data_MV)){    \n",
    "    if(g<=(MV-1)) {MVA_workplaces[g] = sum(final_data_MV$workplaces[1:g])/g}  \n",
    "    else {MVA_workplaces[g] = (MVA_workplaces[g] = sum(final_data_MV$workplaces[(g-(MV-1)):g])/MV)}\n",
    "}\n",
    "\n",
    "for (g in 1:nrow(final_data_MV)){    \n",
    "    if(g<=(MV-1)) {MVA_residential[g] = sum(final_data_MV$residential[1:g])/g}  \n",
    "    else {MVA_residential[g] = (MVA_residential[g] = sum(final_data_MV$residential[(g-(MV-1)):g])/MV)}\n",
    "}\n",
    "    \n",
    "for (g in 1:nrow(final_data_MV)){    \n",
    "    if(g<=(MV-1)) {MVA_reported[g] = sum(final_data_MV$reported[1:g])/g}  \n",
    "    else {MVA_reported[g] = (MVA_reported[g] = sum(final_data_MV$reported[(g-(MV-1)):g])/MV)}\n",
    "}\n",
    "    \n",
    "\n",
    "cbind(final_data_MV, as.data.frame(MVA), as.data.frame(MVA_lower), as.data.frame(MVA_upper),\n",
    "      as.data.frame(MVA_temp), \n",
    "      as.data.frame(MVA_retail), as.data.frame(MVA_grocery), as.data.frame(MVA_parks), \n",
    "      as.data.frame(MVA_transit), as.data.frame(MVA_workplaces), as.data.frame(MVA_residential),\n",
    "      as.data.frame(MVA_reported)) -> temp[[i]]\n",
    "}\n",
    "                                                                         \n",
    "do.call(\"rbind\", temp) -> final_data_MV                                                                         \n",
    "\n",
    "\n",
    "## cutting smoothened values for main analysis\n",
    "final_data_MV %<>% filter(date>=new_Start_date) %>% arrange(prefecture, date)\n",
    "final_data_MV %>% head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimated R in each prefectrue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "## generation interval (Nishiura, et al, 2020)\n",
    "gi_fit = list(shape=2.305, scale=5.452)\n",
    "generation <- function(t){pweibull(t, shape = gi_fit$shape, scale = gi_fit$scale) - \n",
    "                          pweibull(t-1, shape = gi_fit$shape, scale = gi_fit$scale)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "fit_date <- as.Date(\"2020-09-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$par</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2.500004891325</li><li>-0.0173616613645846</li><li>0.0300072230237173</li><li>-0.145323459920875</li><li>2.46833508674072</li><li>2.84350706541662</li><li>2.27966089692675</li><li>2.39734361373236</li></ol>\n",
       "</dd>\n",
       "\t<dt>$value</dt>\n",
       "\t\t<dd>3158.98172945243</dd>\n",
       "\t<dt>$counts</dt>\n",
       "\t\t<dd><style>\n",
       ".dl-inline {width: auto; margin:0; padding: 0}\n",
       ".dl-inline>dt, .dl-inline>dd {float: none; width: auto; display: inline-block}\n",
       ".dl-inline>dt::after {content: \":\\0020\"; padding-right: .5ex}\n",
       ".dl-inline>dt:not(:first-of-type) {padding-left: .5ex}\n",
       "</style><dl class=dl-inline><dt>function</dt><dd>39</dd><dt>gradient</dt><dd>39</dd></dl>\n",
       "</dd>\n",
       "\t<dt>$convergence</dt>\n",
       "\t\t<dd>0</dd>\n",
       "\t<dt>$message</dt>\n",
       "\t\t<dd>'CONVERGENCE: REL_REDUCTION_OF_F &lt;= FACTR*EPSMCH'</dd>\n",
       "\t<dt>$hessian</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 8 × 8 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0.5874358</td><td>       0.000</td><td>       0.000</td><td>      0.0000</td><td>     0.000</td><td>     0.000</td><td> 0.000000e+00</td><td>-6.399976e-01</td></tr>\n",
       "\t<tr><td> 0.0000000</td><td>17356856.214</td><td>-7122918.937</td><td>1175897.3092</td><td> 79976.367</td><td>126171.203</td><td> 4.900177e+04</td><td> 7.273593e+03</td></tr>\n",
       "\t<tr><td> 0.0000000</td><td>-7122918.937</td><td> 5697989.067</td><td>-500496.4751</td><td>-33952.639</td><td>-69681.343</td><td>-1.848874e+04</td><td>-9.896422e+03</td></tr>\n",
       "\t<tr><td> 0.0000000</td><td> 1175897.309</td><td> -500496.475</td><td> 101787.0111</td><td>  3455.566</td><td> 12065.097</td><td> 1.373608e+03</td><td> 6.761280e+01</td></tr>\n",
       "\t<tr><td> 0.0000000</td><td>   79976.367</td><td>  -33952.639</td><td>   3455.5658</td><td>  1293.643</td><td>     0.000</td><td> 0.000000e+00</td><td> 0.000000e+00</td></tr>\n",
       "\t<tr><td> 0.0000000</td><td>  126171.203</td><td>  -69681.343</td><td>  12065.0968</td><td>     0.000</td><td>  2023.232</td><td> 0.000000e+00</td><td> 0.000000e+00</td></tr>\n",
       "\t<tr><td> 0.0000000</td><td>   49001.771</td><td>  -18488.741</td><td>   1373.6081</td><td>     0.000</td><td>     0.000</td><td> 8.195907e+02</td><td> 1.136868e-07</td></tr>\n",
       "\t<tr><td>-0.6399976</td><td>    7273.593</td><td>   -9896.422</td><td>     67.6128</td><td>     0.000</td><td>     0.000</td><td> 1.136868e-07</td><td> 2.254465e+02</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$par] \\begin{enumerate*}\n",
       "\\item 2.500004891325\n",
       "\\item -0.0173616613645846\n",
       "\\item 0.0300072230237173\n",
       "\\item -0.145323459920875\n",
       "\\item 2.46833508674072\n",
       "\\item 2.84350706541662\n",
       "\\item 2.27966089692675\n",
       "\\item 2.39734361373236\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$value] 3158.98172945243\n",
       "\\item[\\$counts] \\begin{description*}\n",
       "\\item[function] 39\n",
       "\\item[gradient] 39\n",
       "\\end{description*}\n",
       "\n",
       "\\item[\\$convergence] 0\n",
       "\\item[\\$message] 'CONVERGENCE: REL\\_REDUCTION\\_OF\\_F <= FACTR*EPSMCH'\n",
       "\\item[\\$hessian] A matrix: 8 × 8 of type dbl\n",
       "\\begin{tabular}{llllllll}\n",
       "\t  0.5874358 &        0.000 &        0.000 &       0.0000 &      0.000 &      0.000 &  0.000000e+00 & -6.399976e-01\\\\\n",
       "\t  0.0000000 & 17356856.214 & -7122918.937 & 1175897.3092 &  79976.367 & 126171.203 &  4.900177e+04 &  7.273593e+03\\\\\n",
       "\t  0.0000000 & -7122918.937 &  5697989.067 & -500496.4751 & -33952.639 & -69681.343 & -1.848874e+04 & -9.896422e+03\\\\\n",
       "\t  0.0000000 &  1175897.309 &  -500496.475 &  101787.0111 &   3455.566 &  12065.097 &  1.373608e+03 &  6.761280e+01\\\\\n",
       "\t  0.0000000 &    79976.367 &   -33952.639 &    3455.5658 &   1293.643 &      0.000 &  0.000000e+00 &  0.000000e+00\\\\\n",
       "\t  0.0000000 &   126171.203 &   -69681.343 &   12065.0968 &      0.000 &   2023.232 &  0.000000e+00 &  0.000000e+00\\\\\n",
       "\t  0.0000000 &    49001.771 &   -18488.741 &    1373.6081 &      0.000 &      0.000 &  8.195907e+02 &  1.136868e-07\\\\\n",
       "\t -0.6399976 &     7273.593 &    -9896.422 &      67.6128 &      0.000 &      0.000 &  1.136868e-07 &  2.254465e+02\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$par\n",
       ":   1. 2.500004891325\n",
       "2. -0.0173616613645846\n",
       "3. 0.0300072230237173\n",
       "4. -0.145323459920875\n",
       "5. 2.46833508674072\n",
       "6. 2.84350706541662\n",
       "7. 2.27966089692675\n",
       "8. 2.39734361373236\n",
       "\n",
       "\n",
       "\n",
       "$value\n",
       ":   3158.98172945243\n",
       "$counts\n",
       ":   function\n",
       ":   39gradient\n",
       ":   39\n",
       "\n",
       "\n",
       "$convergence\n",
       ":   0\n",
       "$message\n",
       ":   'CONVERGENCE: REL_REDUCTION_OF_F &lt;= FACTR*EPSMCH'\n",
       "$hessian\n",
       ":   \n",
       "A matrix: 8 × 8 of type dbl\n",
       "\n",
       "|  0.5874358 |        0.000 |        0.000 |       0.0000 |      0.000 |      0.000 |  0.000000e+00 | -6.399976e-01 |\n",
       "|  0.0000000 | 17356856.214 | -7122918.937 | 1175897.3092 |  79976.367 | 126171.203 |  4.900177e+04 |  7.273593e+03 |\n",
       "|  0.0000000 | -7122918.937 |  5697989.067 | -500496.4751 | -33952.639 | -69681.343 | -1.848874e+04 | -9.896422e+03 |\n",
       "|  0.0000000 |  1175897.309 |  -500496.475 |  101787.0111 |   3455.566 |  12065.097 |  1.373608e+03 |  6.761280e+01 |\n",
       "|  0.0000000 |    79976.367 |   -33952.639 |    3455.5658 |   1293.643 |      0.000 |  0.000000e+00 |  0.000000e+00 |\n",
       "|  0.0000000 |   126171.203 |   -69681.343 |   12065.0968 |      0.000 |   2023.232 |  0.000000e+00 |  0.000000e+00 |\n",
       "|  0.0000000 |    49001.771 |   -18488.741 |    1373.6081 |      0.000 |      0.000 |  8.195907e+02 |  1.136868e-07 |\n",
       "| -0.6399976 |     7273.593 |    -9896.422 |      67.6128 |      0.000 |      0.000 |  1.136868e-07 |  2.254465e+02 |\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$par\n",
       "[1]  2.50000489 -0.01736166  0.03000722 -0.14532346  2.46833509  2.84350707\n",
       "[7]  2.27966090  2.39734361\n",
       "\n",
       "$value\n",
       "[1] 3158.982\n",
       "\n",
       "$counts\n",
       "function gradient \n",
       "      39       39 \n",
       "\n",
       "$convergence\n",
       "[1] 0\n",
       "\n",
       "$message\n",
       "[1] \"CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH\"\n",
       "\n",
       "$hessian\n",
       "           [,1]         [,2]         [,3]         [,4]       [,5]       [,6]\n",
       "[1,]  0.5874358        0.000        0.000       0.0000      0.000      0.000\n",
       "[2,]  0.0000000 17356856.214 -7122918.937 1175897.3092  79976.367 126171.203\n",
       "[3,]  0.0000000 -7122918.937  5697989.067 -500496.4751 -33952.639 -69681.343\n",
       "[4,]  0.0000000  1175897.309  -500496.475  101787.0111   3455.566  12065.097\n",
       "[5,]  0.0000000    79976.367   -33952.639    3455.5658   1293.643      0.000\n",
       "[6,]  0.0000000   126171.203   -69681.343   12065.0968      0.000   2023.232\n",
       "[7,]  0.0000000    49001.771   -18488.741    1373.6081      0.000      0.000\n",
       "[8,] -0.6399976     7273.593    -9896.422      67.6128      0.000      0.000\n",
       "              [,7]          [,8]\n",
       "[1,]  0.000000e+00 -6.399976e-01\n",
       "[2,]  4.900177e+04  7.273593e+03\n",
       "[3,] -1.848874e+04 -9.896422e+03\n",
       "[4,]  1.373608e+03  6.761280e+01\n",
       "[5,]  0.000000e+00  0.000000e+00\n",
       "[6,]  0.000000e+00  0.000000e+00\n",
       "[7,]  8.195907e+02  1.136868e-07\n",
       "[8,]  1.136868e-07  2.254465e+02\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "likelihood <- function(params){\n",
    "    \n",
    "    llk_total <- rep(0, length(prefecture_name))\n",
    "    \n",
    "    for (g in 1:length(prefecture_name)){\n",
    "        \n",
    "        final_data_MV %>% filter(prefecture==prefecture_name[g]) %>% \n",
    "        filter(date < fit_date)%>% \n",
    "        mutate(total = imported_delay + domestic_delay) -> data_MV\n",
    "        \n",
    "        Cs <- rep(0, nrow(data_MV))\n",
    "        llk <- rep(0, nrow(data_MV))\n",
    "        \n",
    "        for (t in 2:nrow(data_MV)){\n",
    "            \n",
    "            Css <- rep(0, t)\n",
    "            \n",
    "            for (tau in 1:(t-1)){\n",
    "                Css[tau] = (data_MV$total[t-tau])*generation(tau)}\n",
    "            \n",
    "            Cs[t] = sum(Css)* params[4+g] *\n",
    "            exp(params[3]*data_MV$MVA_retail[t] + \n",
    "                params[2]*data_MV$MVA_temp[t] + \n",
    "                params[4]*data_MV$MVA_reported[t]/100) \n",
    "            \n",
    "            \n",
    "            Cs[Cs<=0] <- 1e-5\n",
    "           \n",
    "            if (data_MV$date[t] > as.Date(\"2020-05-01\") && data_MV$date[t]  < as.Date(\"2020-07-15\")) {llk[t]=0}\n",
    "            else{llk[t] <- -(-Cs[t]+data_MV$domestic_delay[t]*log(Cs[t])-lgamma(data_MV$domestic_delay[t]+1))}\n",
    "        }\n",
    "        \n",
    "        sum(llk) -> llk_total[g] \n",
    "    }\n",
    "    \n",
    "    gam_par <- gammaParamsConvert(mean=params[1], sd=0.5*params[1])\n",
    "    prior_dist = -dgamma(params[4+g], shape=gam_par$shape, scale=gam_par$scale, log=T)\n",
    "    \n",
    "    return(sum(llk_total)+(prior_dist))\n",
    "}\n",
    "\n",
    "param0 = c(2.5, -0.02, 0.03, -0.16, 2.5, 2.9, 2.3, 2.4)\n",
    "\n",
    "options(warn=-1)\n",
    "opt_est_back <- optim(param0, fn=likelihood, method=c(\"L-BFGS-B\"),\n",
    "                      lower=c(0, -Inf, 0, -Inf, rep(0,length(prefecture_name))),\n",
    "                      upper=c(Inf, 0, Inf, 0, rep(Inf,length(prefecture_name))),\n",
    "                      control=list(maxit=100000), hessian=TRUE)\n",
    "options(warn=0)\n",
    "\n",
    "opt_est_back"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 95% of confidence Intervals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "niter=10000\n",
    "\n",
    "hes <- opt_est_back$hessian\n",
    "fisher_info<-solve(hes)\n",
    "par <- opt_est_back$par\n",
    "\n",
    "hess_same <- mvrnorm(n=niter, mu=par, Sigma=fisher_info, tol=1e-25, empirical =FALSE, EISPACK =FALSE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setting the cap for the reported cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "Density %>% filter(prefecture==c(\"Osaka\")) %>% dplyr::select(popsize) %>% as.numeric() -> pop_Osaka\n",
    "upper_Osaka <- round(pop_Osaka*1000/100000*25/7)\n",
    "\n",
    "final_data_MV %<>% \n",
    "mutate(MVA_reported_upper = \n",
    "       case_when(prefecture==c(\"Osaka\") & (MVA_reported >= upper_Osaka) ~ as.numeric(upper_Osaka),\n",
    "                 TRUE ~ as.numeric(MVA_reported)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predictive performance of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "read_data <- list()\n",
    "\n",
    "for (i in 1:length(scr_files)){\n",
    "  assign(paste0(\"Rt_\", prefecture_name[i]), \n",
    "         read.csv(paste0(src_dir, \"/\", scr_files[i])) %>% mutate(prefecture = prefecture_name[i]) %>%\n",
    "         dplyr::select(prefecture, onset, imported_delay, domestic_delay, Rt, lower, upper) %>% rename(date = onset) %>%\n",
    "         filter(date <= Final_date) %>% filter(!is.na(Rt)) %>% mutate(total = imported_delay+domestic_delay) %>%\n",
    "         mutate(date = as.Date(date))) -> read_data[[i]]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\no0crFAq9JmfvlM/J2Tc0x+TsG04fySsqKgQCQVJSEjPl2rVr7e3tGxsbtUrOvrPooqioaNy4\ncfR9KNr9PWZ/D/A5Ocso7slp6o6uekr+0ksvTZ06lXn57bffEkIkEglPkrN0qvs6b2lpsbCw\nWLlyJTPXggUL7O3tuyo80PBRrOE1NTUdP3581qxZlpaW9JCoqKjy8vLS0lJmmnnz5onF4tmz\nZ7ebNy8vjz71zd6IVCpVPVfv4uLS1tbWJSfA2fu9ffu2WCyur6/Pz8//6aeflEolf8KzdKpU\nKtPT0yMiIpjfVP30008LCgqYWzRxTK4qPz8/IyNj//795ubm+kuusVM+J2ff0FySa9xw+khe\nUlJCUdTEiROZiUNDQ3/77beLFy9yT0407Sy6EIlEEyZMSEhIaPcDShrfA7xNzj6Ke3KauqOr\nPpI3NDRUVlaGhoYyQ0JCQgghZWVlfEjO3qnu67y6ujowMHDSpEnMXC+//LJMJjOW32A1Goau\nLIGif6uE+Y+NoqibN28SQvLy8uiXO3bscHJyqqysXLZsWbv/zLy8vOrr6zU28tlnn4lEohMn\nTjQ3N1+5csXNzW369OndEN7Hx8fNzY252eaQIUOKiop4Ep6l06qqKkJIVlaWTCYrLCwsKSmh\nP1/QNjlDqVT6+vquWrVK99g6dsrn5OwbmktyjRtOH8nPnz9PCDl+/DgzSiKREELS0tK4J6c0\n7SxdIjw8XPVEi8b3AG+TaxzF/X3OcnTVR/LW1tbr168/ffqUGfKvf/2LEJKdnc2H5BwPCzqu\nc1pjY+OlS5c8PT0jIiK6JDwwcMbO8Kqrqwkhjo6OzBAnJydCSE1NDSHk+vXry5YtS01NHTBg\nQLsZy8rKnJ2d6YnZG1m3bt0bb7wxadIkGxub1157zc7O7sCBA/oOT1HU3bt3BQLByZMnnz59\neu7cOZlM9uabb0qlUj6EZ+mUHnXz5s3+/fsHBAT4+fkNGjTo5MmT9GTckzOysrIqKyuXLl2q\ne2xdOuV5cpYNzTE5+4bTU/KAgAAPD49ly5YVFxc3Nzfn5+cvWbKE/P6r4RyTs+8sesK+Ofic\nnB339znL0VVPhEKht7e3SCSiXxYXF7/zzjtisTg8PJwPyTkeFjrS9tiSm5srEolGjRpla2ub\nmprahYsABFfF8gGl5h7Rcrm8paUlIiJizpw5b775ZscJVC9BYmmEEPLZZ5999913GzZsOHny\n5I4dOxoaGkJDQ7vk7DdLvxRFlZSUXL16dcyYMSKRKDg4+J///Of9+/ePHj3Kh/AsndbV1RFC\ntm3blpKS8vTp059++kksFs+cObOyslKr5Mw0q1evjo2Ntbe31zGzjp3yPDnLhuaYnH3D6Sm5\nlZVVbm4uRVH+/v62trYTJkz48MMPCSH0x8Eck7PvLHrCvjn4nJwdx+TsR1d9a2xsjIuLCwoK\ncnFxOXHiBP2ppcGTczksdErbY0tISMj333+/Y8eOmpqa4ODgrr1LA6CwM7x+/fqR3/+/p9HP\nXVxctm7d+vPPPwcHB0skEolEcvv27ZaWFolEUlhYSAjJy8tjvqvB0siVK1c2bNiwffv2FStW\nTJgwYdGiRYcOHTp9+nR2drZew5uZmXl5eanWBKNHjzYzM6NP1Bs8PEunDg4OhJD4+Pjp06eL\nRCJPT8/du3c/ffr0+PHj3JMzQ86cOXPnzp25c+fqGJhLcvZO+ZycfUNzTM6+4fSUnBDy6quv\nlpaWlpaWnjt3rq6ubvLkyYQQ+vuCHJOz7yx6wr5QfE7OjmNy9qOrXuXn5w8bNmz37t2bNm26\nfPmym5sbT5JzOSx0Sttji5OTU0hIyKJFizIyMoqKio4dO6ZjclCFws7wBgwYYG5urnocpJ+7\nuro+fvxYKpW+/fbb4eHh4eHhEomkoaEhPDx88+bNtbW1DQ0Nnp6eGhu5d+8eIeT1119nRgUE\nBJiZmd2+fVuv4e/du5eZman6iYxMJlMqlc7OznwIz9Ip/emGu7s7M8rV1dXc3Ly2tpZ7cmZI\nampqcHCwamv6S87SKc+Ts2xo7slZNpz+ksvl8qKiooaGhmHDhgUHB/fs2bOgoMDCwmLYsGFa\nvc/V7Sw6Jn++heJ5chbck7McXfWa8OzZsxMmTBgyZMitW7c+/vhj5goDPiTncljoiHvyI0eO\n+Pn5PX36lBk1ZMgQQsjjx491TA5/0D1f5QN206ZNe+2115RKJf1y9uzZgwcPZl4yVL8ku2fP\nnri4OC6N0Bc0paSkMFOeO3eOEJKTk6PX8Hfv3iWE/OMf/2CmzMzMFAgEJSUlPAnPstr9/PxU\nv9J74sQJQsixY8e4J6dfNjU1CYXCbdu26Z5Wx055npxlQ2uVXN2G01/ytra23r17h4eH08Nl\nMllAQMCf//xnSpt1zrKz6J6c0fE77+ry8D+5ulHavs8Z3XPxRFtbm7u7+5QpUzoG4ElyLp0+\n9zqnzykyV4pQFLV3715CyJUrV7oqP1C4jx1P5OfnC4XC6OjoU6dOxcfHCwSC9PT0jpOp7sDh\n4eEXL17k2MjMmTOtra3j4+Ozs7PXr1/v5OQ0cuTIrrqPHUu/kZGR1tbWCQkJBw8eXLFihZWV\n1fz58/kTnqXT3NxcMzOziIiIr7/+euPGjb169QoJCVEqlVolpyiK/qZRYWGh7ml17JT/ydVt\naK2Sq9twek2+evVqgUAQHx+fmZk5fvx4BweH4uJiSst1rm5n6UIdyyN1efifXN0obd/njO4p\n7Oib4ERHR2/7o5KSEp4k59KpLut83LhxDg4O69evz87OTkhIsLOzCwsL66rwQENhxxenTp36\n05/+1LNnz4CAgL1793Y6DbMDP3v2zM3Nra2tjWMjLS0tGzZsGDp0qI2NzSuvvLJkyZInT550\nQ3ipVBofH+/m5mZtbe3r65uUlNTW1sar8Cyr/ciRI6NGjRKJRIMHD16+fLlUKtU2OUVRsbGx\nNjY2zG3lu5BWnRpF8k439HMk77jh9J1coVCsXr164MCBTk5OYWFh9M0+tE3e6c7SVclpnZZH\nHfMYS/KOo57j3cLonsIuIyOj04/ONm3axJ/kGjvVZZ0/evTogw8+oN8t3t7eiYmJzc3NXRge\nKIoSUGouYAEAAAAA44KLJwAAAABMBAo7AAAAABOBwg4AAADARKCwAwAAADARKOwAAAAATAQK\nOwAAAAATgcIOAAAAwESgsAMAAAAwESjsAAAAAEwECjsAAAAAE4HCDgAAAMBEoLADAAAAMBEo\n7AAAAABMBAo7AAAAABOBwg4AAADARKCwAwAAADARKOwAAAAATAQKOwAAAAATgcIOAAAAwESg\nsAMAAAAwESjsAAAAAEwECjsAAAAAE4HCDgAAAMBEoLADAAAAMBEo7AAAAABMBAo7AAAAABOB\nwg4AAADARKCwAwAAADARKOwAAAAATAQKOwAAAAATgcIOAJ7TpUuXBH9kaWnp7u6+cOHCe/fu\nGTpd5zIyMtzc3Gxtbe/evcvPBgEAdIHCDgB0MmjQoNm/Gzt2bFNTU2pqqo+Pz4kTJ7g3IpFI\nBALBgQMH9JeTEFJdXb1gwQKlUrlkyRIHB4dOp/Hz8xMIBGfPnu2qBrXScT1olQcAwMLQAQDA\nuI0aNWrfvn2qQ7Zs2RIXFxcREVFRUWFvb2+oYB3dvn1boVAsWbJk6dKl/GwQAEBHKOwAoIt9\n8sknUqk0ISHh73//e0JCgqHj/J9SqSSE2NnZsUxz5swZhULRq1evrmpQR1rlAQAgFADAc7l4\n8SIhZPbs2R1HPXr0yMbGpk+fPsyQkpKSGTNmuLq69ujRw9XV9a9//eu1a9foUW+88YbqQam+\nvp4eLpfL161bFxgYaGdn5+7uHhMTU1VVxR6poaFh8eLFvr6+dnZ2I0aMiIuLa25upkfNnj1b\ntZfy8vJOW5g/fz4hpKmpiX7u4OCgUChWr149cOBAa2trHx+ftLQ09gY1xq6vr1+wYIFYLLaz\nsxs+fPiuXbsUCoW69aCah30BNQYGgBcBvmMHAF3P0dHR39+/rq6uoaGBEHLnzp2QkBCJRDJy\n5Mjo6Oh+/fp98803Y8eOraqqIoQsX748NjaWELJw4cKMjAz6BJhMJhs7duzKlSsVCkVkZORL\nL72UnJwcGBj466+/quu0qqpq+PDhO3bs6NmzZ2RkpLm5+ebNmwMCApqamujG4+PjCSFz587N\nyMjo378/lwWhKGrevHllZWW7d+/Ozc21traeP39+Tk6OugY1xq6oqBgxYsSePXvc3d0jIyMb\nGxvff//9FStWqFsP3BdQY2AAeCEYurIEAGPFcsaOoqjIyEhCSHFxMUVRq1atIoTk5eUxY5OT\nkwkh+/bto18eOXKEELJ//35mgi1bthBCVq9ezQxJTU0lhMycOVNdnoULFxJCtm/fzgxZuXIl\nISQxMZF+ee7cOULIrl27WBaq3Rk7Qsi0adOYsffv3yeEzJo1S12DGmPTq4VZFa2trYGBgQKB\n4OHDh52uB9U8GhdQY2AAMHk4YwcAetG3b19CyMOHDwkhISEhaWlpU6dOZcZ6enoSQh49eqRu\n9q1bt3p4eNAVIW3+/PmjR4+WSCQtLS0dp5fL5enp6b6+vjExMczAVatWubi47Nq1S5cF+fjj\nj5nnrq6uvXr1eu7YtbW1WVlZEyZMCA0NpccKhcIVK1b4+/uXl5ezx+C+gFoFBgATg4snAEAv\n6urqCCH0B5Tjxo2jB0ql0tLS0kuXLqWnp7PM29TU9OuvvwYFBWVlZakOt7a2bm1tvXPnjo+P\nT7tZKioq5HJ5cHCw6kChUBgYGHj48GGpVGpra/t8CyIWi1VfmpubP3fshoYGiqLGjBmjOjYs\nLCwsLExjDO4LyD0wAJgeFHYAoBf0t8pefvllQkhDQ0NCQsLp06dv3bpFUZSXl9fAgQPLysrU\nzUt/gFhQUFBQUNBxbGNjY8eB9KlBZ2fndsPpyvLBgwf0OcLnwP2OLRpj0xP069fvOWJwX0Be\n3WIGALoZPooFgK735MmToqKiPn360LftjYqKSk5OHjFiRHZ29pMnT27evLlmzRqW2enS5913\n3+30GyRBQUEdZ3FxcSGE1NTUtBtOD3m+WkpbGmPTZdnzfTDKhwUEAP5DYQcAXW/nzp1SqXTx\n4sWEkMbGxpMnT4aFhR04cGD69On0+aQHDx6wzO7o6Ojk5HTlypV2ww8dOvTVV191Oou7u7uF\nhcWFCxdUB8rl8suXLzs7O/fs2VOn5eFGY+zBgwcTQtqdz7tw4cKgQYP27t3L3jgfFhAA+A+F\nHQB0seTk5MTERAcHh48++ogQ0traKpfL29ramAkaGxs3bdpEj1KdUSaTMc/fe++9H3/8kb54\nlvbvf/87IiJC3Y9rWVpaRkdHX716NSUlhRm4bt26ysrK9957r4uWTDP22AMHDpw4caJEIjl9\n+jQ9lqKopKSkiooKf39/ZhbV9cDgyQICAM/hO3YAoJMffvjhnXfeoZ/X1tYWFxdXV1dbWVl9\n/fXX9Mm53r17h4SEHDt2bPz48UFBQY8ePcrJyRk+fLilpWVycrKDg8PChQutra0JITt37nzw\n4MEnn3xiY2MTHx8vkUhiY2NzcnL8/Pyqq6slEknv3r2TkpLUJUlMTDx16tT777+fnZ0tFouL\ni4svX77s7e29fPny7lkVhBCNsb/88suQkJApU6ZMmTLFzc3t4sWLJSUlMTEx3t7ehJCO64Fv\nCwgAPIczdgCgk3v37mX87tSpU5aWlu++++7169cnT57MTJOdnT1v3rybN29u3769rKxs48aN\np06dSktLc3V1pe9RPGbMmNDQ0Bs3bmzdupU+jScSiQoLC+Pi4pqamtLS0oqKiqKjowsLC93d\n3dUlcXFxuXbt2gcffFBbW5uZmdna2vq3v/2tsLCwa3/yy87OztXVVd1YjbG9vb2vXr361ltv\nlZWVpaenCwSClJSUbdu20WM7rgfdF5A9MACYGAFFUYbOAAAAAABdAGfsAAAAAEwECjsAAAAA\nE4HCDgAAAMBEoLADAAAAMBEo7AAAAABMBAo7AAAAABOBwg4AAADARKCwAwAAADARKOwAAAAA\nTAQKOwAAAAATgcIOAAAAwESgsAMAAAAwESjsAAAAAEzEfwGCdLoFgEcNnAAAAABJRU5ErkJg\ngg==",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 300,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_data_MV %>% filter(prefecture==c(\"Osaka\")) -> tempformatrix\n",
    "\n",
    "R_CI <- matrix(NA, ncol=niter, nrow=nrow(tempformatrix))\n",
    "CIs <- matrix(NA, ncol=3, nrow=nrow(tempformatrix))\n",
    "\n",
    "\n",
    "for (k in 1:niter){\n",
    "final_data_MV %>% filter(prefecture==c(\"Osaka\")) %>%\n",
    "\n",
    "mutate(modelled_back = \n",
    "       hess_same[k, 5] * \n",
    "       exp(hess_same[k, 2]*MVA_temp + \n",
    "           hess_same[k, 3]*MVA_retail +\n",
    "           hess_same[k, 4]*MVA_reported_upper/100)) -> temp\n",
    "    \n",
    "    for(q in 1:nrow(temp)){temp$modelled_back[q] -> R_CI[q,k]}\n",
    "}\n",
    "\n",
    "for(w in 1:nrow(temp)){\n",
    "    quantile(R_CI[w,], .025, na.rm = FALSE) -> CIs[w,1] \n",
    "    quantile(R_CI[w,], .5, na.rm = FALSE) -> CIs[w,2] \n",
    "    quantile(R_CI[w,], .975, na.rm = FALSE) -> CIs[w,3] \n",
    "}\n",
    "\n",
    "CIs %<>% as.data.frame\n",
    "colnames(CIs) <- c(\"lower\", \"median\", \"upper\")\n",
    "\n",
    "## Renewal equation\n",
    "temp %>% dplyr::select(date) -> tempp\n",
    "\n",
    "cbind(tempp, CIs) -> Rt_data\n",
    "read_data[[1]] %>% filter(date >= new_Start_date) %>% filter(date <= Final_date) %>% \n",
    "mutate(total = domestic_delay + imported_delay) -> temppp\n",
    "\n",
    "merge(temppp, temp, by=c(\"date\")) -> Rt_CI\n",
    "merge(Rt_CI, Rt_data, by=c(\"date\")) -> figure_data\n",
    "figure_data -> figure_data_CI_Osaka\n",
    "\n",
    "\n",
    "\n",
    "final_data_MV %>% filter(prefecture==c(\"Osaka\")) %>%\n",
    "\n",
    "mutate(modelled_back = \n",
    "       opt_est_back$par[5] * \n",
    "       exp(opt_est_back$par[2]*MVA_temp + \n",
    "           opt_est_back$par[3]*MVA_retail + \n",
    "           opt_est_back$par[4]*MVA_reported_upper/100)) -> dt_Osaka_MV\n",
    "\n",
    "\n",
    "## Renewal equation\n",
    "dt_Osaka_MV %>% dplyr::select(date, modelled_back) -> Rt_data\n",
    "merge(read_data[[1]], Rt_data, by=c(\"date\"), all.x=TRUE) -> percent\n",
    "percent %<>% mutate(total = domestic_delay + imported_delay) \n",
    "\n",
    "Cs <- rep(0, nrow(percent))\n",
    "\n",
    "start = which(percent$date == new_Start_date)\n",
    "\n",
    "for (t in start:nrow(percent)){\n",
    "    \n",
    "    Css <- rep(0, t)    \n",
    "    for (tau in 1:t-1){Css[tau] = (percent$total[t-tau+1])*generation(tau)}\n",
    "    \n",
    "    Cs[t] = sum(Css)*percent$modelled_back[t]+percent$imported_delay[t]\n",
    "}  \n",
    "\n",
    "as.data.frame(Cs[start:nrow(percent)]) -> modelled\n",
    "colnames(modelled) <- c(\"modelled_case\")\n",
    "cbind(dt_Osaka_MV,modelled) -> dt_Osaka_MV\n",
    "\n",
    "\n",
    "## Figure for Osaka\n",
    "dt_Osaka_MV %<>% filter(date >= Start_date) %>% filter(date <= Final_date) %>% \n",
    "mutate(total = domestic_delay + imported_delay) -> figure_data\n",
    "\n",
    "\n",
    "figure_data %>% dplyr::select(total, modelled_case) %>% gather(date) -> bar_data\n",
    "figure_data %>% dplyr::select(date) -> TIME\n",
    "rbind(TIME, TIME) -> TIME\n",
    "cbind(bar_data, TIME) -> bar_data\n",
    "colnames(bar_data) <- c(\"subject\",\"value\",\"date\")\n",
    "\n",
    "\n",
    "options(repr.plot.width=7,repr.plot.height=5)\n",
    "\n",
    "adj=1.3\n",
    "scaling_parameter=max(figure_data$total)/max(figure_data$Rt[!is.na(figure_data$Rt)])\n",
    "\n",
    "\n",
    "bar_data %>%\n",
    "ggplot() + \n",
    "geom_bar(aes(x=date, y=value, fill=subject, group=subject),stat='identity', position =\"identity\", width=0.7) +\n",
    "\n",
    "scale_fill_manual(values=c(alpha(\"grey45\", 0.5),alpha(\"#FAAB18\", 1))) +\n",
    "geom_line(data=figure_data,aes(x=date,y=MVA*scaling_parameter*adj),color=\"#1380A1\",size=0.7) +\n",
    "geom_line(data=figure_data,aes(x=date,y=modelled_back*scaling_parameter*adj),color=\"lightslateblue\",size=0.7) +\n",
    "\n",
    "ggtitle(\"Osaka\") +\n",
    "labs(x=\"\\nDate of infection\", y=\"Incidence\\n\") +\n",
    "theme(text = element_text(size=12, family=\"sans\",color=\"black\"),\n",
    "      axis.text = element_text(size=10, family=\"sans\",color=\"black\"),\n",
    "      panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n",
    "      legend.position = \"none\") +\n",
    "scale_x_date(date_labels=\"%m/%d\",date_breaks  =\"30 day\", expand = c(0, 0)) +\n",
    "geom_hline(yintercept=1*scaling_parameter*adj, linetype=\"dashed\", color = \"#1380A1\", size =0.7) +\n",
    "\n",
    "geom_ribbon(data=figure_data_CI_Osaka, aes(x=date,\n",
    "                ymax=upper*scaling_parameter*adj, \n",
    "                ymin=lower*scaling_parameter*adj), \n",
    "            fill=\"lightslateblue\", alpha = 0.4) +\n",
    "\n",
    "geom_ribbon(data=figure_data_CI_Osaka, aes(x=date,\n",
    "                ymax=MVA_upper*scaling_parameter*adj, \n",
    "                ymin=MVA_lower*scaling_parameter*adj), \n",
    "            fill=\"#1380A1\", alpha = 0.4) +\n",
    "\n",
    "annotate(\"rect\", xmin = new_Start_date, xmax = as.Date(\"2020-04-30\"), \n",
    "         ymin = 0, ymax = 1000, alpha = 0.1, fill = \"indianred2\") +\n",
    "annotate(\"rect\", xmin = as.Date(\"2020-07-15\"), xmax = as.Date(\"2020-08-31\"), \n",
    "         ymin = 0, ymax = 1000, alpha = 0.1, fill = \"indianred2\") +\n",
    "\n",
    "scale_y_continuous(expand = c(0, 0),\n",
    "                   sec.axis = sec_axis(~./(scaling_parameter*adj), breaks=c(0,2,4,6,8,10), \n",
    "                                       name=\"Effective reproduction number\\n\")) +\n",
    "coord_cartesian(ylim = c(0,1000))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.0.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
